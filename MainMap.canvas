{
	"nodes":[
		{"id":"d00c5485e9541cc4","type":"group","x":-1480,"y":1234,"width":987,"height":3560,"label":"List of LDAP Search Query Attributes"},
		{"id":"02faa126b087790a","type":"group","x":-4160,"y":350,"width":1220,"height":1410,"label":"Search topic"},
		{"id":"b766e572bc489ec9","type":"group","x":1560,"y":1720,"width":1136,"height":720,"label":"Untitled group"},
		{"id":"1a4e7aa95674bf2f","type":"group","x":-2320,"y":1314,"width":780,"height":840,"label":"UAS Value List"},
		{"id":"10e38a401095bdbb","type":"text","text":"## Service Enumeration","x":224,"y":1571,"width":336,"height":80},
		{"id":"600906e6cbe095c9","type":"text","text":"## Scheduler Enumeration","x":224,"y":600,"width":336,"height":90},
		{"id":"be46450db2cae69a","type":"text","text":"# MindMap of Windows Enumeration","x":-1493,"y":810,"width":392,"height":104,"color":"1"},
		{"id":"179094e6ba2d2b2c","type":"text","text":"## Check system on domain or workgroup\n\n``` powershell\n\n(Get-WmiObject Win32_ComputerSystem).PartOfDomain\n(Get-WmiObject Win32_ComputerSystem).Domain\n\n```\n\n``` CMD\nwmic computersystem get domain,partofdomain\n```","x":-934,"y":720,"width":522,"height":285},
		{"id":"c5163b6b6363c2cc","type":"text","text":"## Domain","x":-220,"y":-340,"width":250,"height":60},
		{"id":"e6154d5f4d65e09d","type":"text","text":"## AD Enumeration","x":224,"y":-366,"width":336,"height":86},
		{"id":"0deb57519b817e85","type":"text","text":"## Running the Enumeration in Scripted Form","x":883,"y":1960,"width":357,"height":100},
		{"id":"f82fa6fce5beb074","type":"text","text":"## Check all services","x":883,"y":1261,"width":357,"height":80},
		{"id":"a05de09f9d7dad60","type":"text","text":"## Check scheduled tasks.","x":883,"y":607,"width":357,"height":69},
		{"id":"ce9ccc7c0e51dd61","type":"text","text":"## Domain Trust","x":883,"y":188,"width":357,"height":78},
		{"id":"47278f5e45b06dbf","type":"text","text":"## AD  Domain and Forest enumeration","x":883,"y":-220,"width":357,"height":78},
		{"id":"0293d6c1b4598b68","type":"text","text":"## Local","x":-220,"y":2460,"width":250,"height":60},
		{"id":"c814b6cece9faa34","type":"text","text":"```CMD\n# Lists all services, including running and stopped\nsc query state= all\n\n# Queries the status of a specific service \nsc query wuauserv\n\n# Displays the configuration of a specific service\nsc qc wuauserv\n```\n\n```powershell\n# Lists all services on the system\nGet-Service | Format-List *\n\n# Provides detailed information about a specific service\nGet-Service -Name < ServiceName > | Format-List *\n\n# Lists services along with their statuses\nGet-Service | Select-Object Name, Status\n\n# Filters and lists only the running services\nGet-Service | Where-Object { $_.Status -eq 'Running' }\n\n# Retrieves detailed configuration and status of a specific service using WMI\nGet-WmiObject -Class Win32_Service -Filter \"Name='wuauserv'\" | Format-List *\n```","x":1580,"y":991,"width":1280,"height":620},
		{"id":"a0b951863e97e01b","type":"text","text":"```CMD\n# Lists all scheduled tasks with detailed information\nschtasks /query /fo LIST /v\n\n# Lists detailed information about a specific task named \"TaskName\".\nschtasks /query /fo LIST /v /tn <TaskName>\n\n```\n\n```powershell\n# Retrieves all scheduled tasks and formats the output in a detailed list format.\nGet-ScheduledTask | Format-List *\n\n# Lists scheduled tasks along with their triggers\nGet-ScheduledTask | Select-Object TaskName, Triggers\n\n```","x":1580,"y":454,"width":831,"height":382},
		{"id":"dfb727dcc6ed7eae","type":"text","text":"## Check suspicious named tasks","x":2640,"y":607,"width":264,"height":77},
		{"id":"95ca6015ba1034aa","type":"text","text":"``` powershell\n## Displays domain trust relationships.\nnltest /domain_trusts \n## Lists domain controllers for a specified domain.\nnltest /dclist:< domain > \n\n## Powershell version\nGet-ADTrust -Filter *\n```","x":1600,"y":120,"width":700,"height":214,"color":"6"},
		{"id":"71d7fa52d78485de","type":"text","text":"``` Powershell\n## Retrieves the properties of the Active Directory domain.\nGet-ADDomain\n\n## Retrieves the properties of the Active Directory forest.\nGet-ADForest\n\n## Retrieves the properties of domain controllers.\nGet-ADDomainController \n\n## Retrieves domain controllers along with their names, sites, and IPv4 addresses.\nGet-ADDomainController -Filter * | Select-Object Name, Site, IPv4Address\n```\n\n","x":1567,"y":-341,"width":1013,"height":320},
		{"id":"ea7f2a13f546dc8d","type":"text","text":"``` CMD\n## Lists all components of each type object.\ndsquery < user | computer | group | ou > -name * -limit 0\n\n## Lists all objects in the domain with their distinguished names.\ndsquery * -filter (objectClass=*) -attr distinguishedName\n```","x":2140,"y":-577,"width":960,"height":189},
		{"id":"d01ff3ae477bd6d8","type":"text","text":"``` Powershell\n## Retrieves all user accounts along with their names, SAM account names, and descriptions.\nGet-ADUser -Filter * -Properties * | Select-Object Name, SamAccountName, Description\n\n## Retrieves all groups along with their names, categories, and descriptions.\nGet-ADGroup -Filter * -Properties * | Select-Object Name, GroupCategory, Description\n\n## Retrieves all computers along with their names, operating systems, and service packs.\nGet-ADComputer -Filter * -Properties * | Select-Object Name, OperatingSystem, OperatingSystemServicePack\n\n## Retrieves all organizational units along with their names and descriptions.\nGet-ADOrganizationalUnit -Filter * -Properties * | Select-Object Name, Description\n```","x":2140,"y":-947,"width":960,"height":320},
		{"id":"91239944f8a7edd5","type":"text","text":"## Check permissions and ACL ","x":3120,"y":1265,"width":388,"height":73},
		{"id":"2c065c4f9b53fb4d","type":"text","text":"```CMD\nschtasks /query /tn <TaskName> /fo list /v\n```\n\n```Powershell\n$r = @(\"TaskName\",\"State\",\"Execute\");foreach ($t in Get-ScheduledTask){$a=\"\" | Select TaskName, State, Execute; $a.Taskname = $t.TaskName;$a.Execute = $t.Actions.Execute;$a.State=$t.State;$r += $a}$r | Where-Object TaskName -eq \"vulntask\"\n```\n","x":3120,"y":525,"width":784,"height":241},
		{"id":"069f95b3afe3e7f8","type":"text","text":"``` powershell\n## Identify accounts where Kerberos pre-authentication is disabled, as these may be susceptible to brute-force attacks.\nGet-ADUser -Filter * -Properties DoesNotRequirePreAuth | Where-Object {$_.DoesNotRequirePreAuth -eq $true}\n\n## Enumerate accounts with Kerberos constrained delegation rights\nGet-ADUser -Filter * -Properties msDS-AllowedToDelegateTo | Where-Object {$_.msDS-AllowedToDelegateTo -ne $null}\n\n## Analyze Kerberos ticket lifetimes to ensure they align with security policies and detect anomalies.\nGet-ADUser -Identity <Username> -Properties KerberosTicketFlags | Select-Object KerberosTicketFlags\n```","x":902,"y":-1751,"width":1222,"height":258},
		{"id":"35c0d89f91ba38a3","type":"text","text":"``` powershell\n## to list all cached Kerberos tickets on a Windows\nKlist\n```","x":900,"y":-1890,"width":520,"height":115},
		{"id":"9ac754a60f9e613f","type":"text","text":"## Users and Groups","x":3400,"y":-640,"width":265,"height":75},
		{"id":"f4ac75b58e011232","type":"text","text":"``` powershell\n## Monitor event logs for Kerberos TGS requests, which can provide insights into service principal names (SPNs) and authentication activities.\nGet-WinEvent -FilterHashtable @{LogName='Security'; ID=4769}\n```\n","x":900,"y":-2078,"width":1224,"height":131},
		{"id":"c226757e89689a23","type":"text","text":"##### Checks Access Control List (ACL) permissions of executable file of the service\n```CMD\nicacls C:\\Windows\\System32\\svchost.exe\n```\n\n```powershell\nget-acl C:\\Windows\\System32\\svchost.exe | fl\n```","x":3768,"y":1186,"width":796,"height":231},
		{"id":"a0b43af4b97d53e5","type":"text","text":"## AD Common-Name(CN) enumeration","x":900,"y":-664,"width":340,"height":84},
		{"id":"66bb7c823362e9e8","type":"text","text":"## NTLM\\Kerberos Enumeration ","x":224,"y":-1890,"width":336,"height":77},
		{"id":"ff732b12b148d58e","type":"text","text":"## DSQUERY","x":1480,"y":-520,"width":289,"height":74},
		{"id":"91e94e49805a18e0","type":"text","text":"## Get-AD commands","x":1480,"y":-824,"width":289,"height":74},
		{"id":"46c1560599835fe5","type":"text","text":"``` Powershell\n## Retrieves members of the domain group along with their names and SAM account names.\nGet-ADGroupMember \"< GroupName >\" | Select-Object Name, SamAccountName\n```\n\n``` CMD\n##  Displays group information on a domain.\nnet group\n\n## Lists members of the Domain Admins group.\nnet group \"< GroupName >\" /domain\n```\n##### Important Group names for search : \n* Domain Admins, Enterprise Admins\n* Domain Controllers\n* Schema Admins, Exchange\n* Organization Administrators\n* Administrators\n\n","x":3976,"y":-870,"width":820,"height":535},
		{"id":"70cb92a429e23f5a","type":"text","text":"``` powershell\n## setspn used in Windows environments to manage Service Principal Names (SPNs)\nsetspn [options] < service account >\n\n## SPN to the specified account.\nsetspn -A < SPN > < account >\n\n## Deletes an SPN from the specified account.\nsetspn -D < SPN > < account >\n\n## Lists all SPNs registered to the specified account.\nsetspn -L < account >\n\n\n```","x":900,"y":-2480,"width":800,"height":360},
		{"id":"71c0359516cb7711","type":"text","text":"#### Check running task path for unquoted tasks:\n```\nTask To Run:                  C:\\Path\\my task\\task.exe\n```\n#### Check ACL for sub folder :\n``` CMD\nicacls C:\\Path\n```\n\n``` Powershell\nget-acl c:\\Path | fl\n```","x":4182,"y":470,"width":586,"height":352},
		{"id":"e05e9a5b1a82d0d1","type":"text","text":"#### Check ACL of running task : \n##### Task To Run:                          C:\\\\path\\\\to\\\\task\n```CMD\nicacls C:\\path\\to\\task\n```\n\n``` Powershell\nget-acl c:\\tasks\\schtask.bat | fl\n```","x":4160,"y":98,"width":630,"height":258},
		{"id":"925158903f89e395","type":"text","text":"``` powershell\n#Check if you are Admin\n$cuaccess=[System.Security.Principal.WindowsIdentity]::GetCurrent()\n$cuprivilege=New-Object System.Security.Principal.WindowsPrincipal($cuaccess)\n$cuprivilege.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)\n```","x":2840,"y":3941,"width":805,"height":137},
		{"id":"1994f82f8b8512f8","type":"text","text":" - **Look for**: Weak account policies, such as no password requirements, which could be exploited.\n``` powershell\n## Information about password requirements\nnet accounts \n```","x":2840,"y":4121,"width":823,"height":143},
		{"id":"8d1b4c5e91e99b76","type":"text","text":"* **What to Look For**: The current username. Identify if the user is an admin or belongs to privileged groups.\n- **Potential Exploit**: If the user is an admin, directly attempt Privesc sub-node number 1. If not, look for misconfigurations.\n- **Look for**: Any high-value privileges that are enabled. Common ones include:\n    - **SeDebugPrivilege**: Allows debugging of processes, often used to escalate privileges.\n    - **SeImpersonatePrivilege**: Allows the user to impersonate another user.\n    - **SeBackupPrivilege** and **SeRestorePrivilege**: Can be used to back up and restore files, potentially overwriting sensitive system files. \n``` Powershell\n#Get all information about current user, take a look at the enabled tokens\nwhoami /all\n\n#Show only privileges\nwhoami /priv\n\n#Get information about specific user\nnet user < UserName > \n```\n\n``` PowerShell\n# Get information about specific local user\nGet-WmiObject -Class Win32_UserAccount -Filter \"Name=< UserName >\"\nGet-LocalUser -Name duser | Select * \n```","x":1580,"y":3841,"width":1000,"height":560},
		{"id":"498e2d04cf912642","type":"text","text":"## User Enumeration","x":883,"y":4082,"width":357,"height":78},
		{"id":"d5bfda678c4005d0","type":"text","text":"1. **`icacls\\ Get-ACL`**:\n    \n    - Displays or modifies discretionary access control lists (DACLs) on specified files.\n        - **Look for**:\n            - Files or folders where the current user has write permissions. This can be used to replace executable files with malicious ones.\n            - Misconfigured permissions that allow broader access than \n\n``` powershell\n## Display access control lists (ACL) on specified files.\nicacls \"C:\\example\\file.txt\"\n\nGet-Acl \"C:\\example\\file.txt\"\n```\n\n```PowerShell\n## Get access control lists (ACL) of all files and folders within a directory recursively:\nicacls \"C:\\example\\folder\" /T\n\nGet-ChildItem \"C:\\example\\folder\\\" -Recurse | Get-Acl | Format-Table \n```","x":2840,"y":4301,"width":923,"height":454},
		{"id":"3ed48e94757891c5","type":"text","text":"- **Look for**:\n     - **Local Group Memberships**: Membership in groups like `Administrators`, `Server Operators`, `Backup Operators`, etc., can provide elevated privileges.\n   - **Account Settings**: Check if the account has any special configurations, such as password never expiring, or if the user has the ability to change their password.\n``` powershell\n#All available groups\nnet localgroup \n\n#Info about specific a group\nnet localgroup < GroupName > \n\n#Add user to group\nnet localgroup < GroupName > < UserName > /add \n```","x":1580,"y":4441,"width":780,"height":396},
		{"id":"e52f0d2795d28cb6","type":"text","text":"## Users and groups Enumeration","x":224,"y":4581,"width":336,"height":120},
		{"id":"cec118cde28f7148","type":"text","text":"## Group Enumeration","x":883,"y":4595,"width":357,"height":89},
		{"id":"b30f7807d972baf1","type":"text","text":"``` powershell\n## List credential\ncmdkey /list \n\n## List Windows vault\nvaultcmd /listcreds:\"Windows Credentials\" /all \n\n## You need graphical access\nrundll32 keymgr.dll, KRShowKeyMgr \n```","x":2856,"y":4996,"width":664,"height":245},
		{"id":"5e48ae0e0f1ab924","type":"text","text":"## Enumeration Tools \n","x":-3600,"y":450,"width":313,"height":69,"color":"#cca000"},
		{"id":"8b2a08f708d981d0","type":"text","text":"### Domain DNS, local DNS cash ...\n`dig`","x":-3480,"y":630,"width":480,"height":104},
		{"id":"607d19eb4c086c1c","type":"text","text":"## GPO","x":-3480,"y":770,"width":480,"height":60},
		{"id":"7d70237c675cebc5","type":"text","text":"# 1.AD RECON\n# 2.Ping Castle\n\n# 3.SharpHound","x":-3240,"y":373,"width":260,"height":222,"color":"3"},
		{"id":"ef231c4d15f7be41","type":"text","text":"## PowerView\n### helpful link\nhttps://gowthamaraj-rajendran.medium.com/red-teaming-ad-enumeration-domain-objects-trust-2144e7c28939","x":-4120,"y":595,"width":480,"height":175},
		{"id":"554086cace7b573f","type":"text","text":"``` powershell\nCommandType     Name            \n-----------     ----         \nAlias           Get-NetComputer\nAlias           Get-NetDomain\nAlias           Get-NetDomainController\nAlias           Get-NetDomainTrust\nAlias           Get-NetFileServer\nAlias           Get-NetForest\nAlias           Get-NetForestCatalog\nAlias           Get-NetForestDomain\nAlias           Get-NetForestTrust\nAlias           Get-NetGPO\nAlias           Get-NetGPOGroup\nAlias           Get-NetGroup\nAlias           Get-NetGroupMember\nAlias           Get-NetOU\nAlias           Get-NetProcess\nAlias           Get-NetSite\nAlias           Get-NetSubnet\nAlias           Get-NetUser\n```","x":-4120,"y":791,"width":428,"height":500},
		{"id":"3e7c8dde12984413","type":"text","text":"``` powershell\nGet-ADDefaultDomainPasswordPolicy\nGet-ADAccountLockoutPolicy\nGet-ADDefaultDomainPasswordPolicy | Select-Object -Property Kerberos*\n```","x":-3640,"y":870,"width":660,"height":171},
		{"id":"a709ce4fba947613","type":"text","text":"### LDAP\n``` powershell\nGet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters\" -Name \"LDAPServerIntegrity\"\ndsacls \"CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=yourdomai\n```","x":-3640,"y":1070,"width":660,"height":221},
		{"id":"1c15ca85f1694b23","type":"text","text":"Certainly! Below is a detailed table that outlines the enumeration commands for Windows, specifying the environment (CMD or PowerShell), required privileges (Normal User or Admin), what to look for in the output, and potential exploitation opportunities:\n\n| Command                                                                  | CMD                                                                                                                                             | PowerShell | Privileges  | What to Look For                         | Potential Exploit                                                                                |                                                                            |\n| ------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------- | ---------- | ----------- | ---------------------------------------- | ------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------- |\n| `whoami`                                                                 | ✓                                                                                                                                               | ✓          | Normal User | Current username                         | Identify if user is an admin or part of privileged groups.                                       |                                                                            |\n| `echo %username%`                                                        | ✓                                                                                                                                               |            | Normal User | Current username                         | Similar to `whoami`.                                                                             |                                                                            |\n| `net user %username%`                                                    | ✓                                                                                                                                               | ✓          | Normal User | Detailed user information                | Look for \"Password never expires\" or weak password policies. Attempt password guessing.          |                                                                            |\n| `whoami /priv`                                                           | ✓                                                                                                                                               | ✓          | Normal User | List of privileges                       | Look for `SeDebugPrivilege`, `SeImpersonatePrivilege`, `SeBackupPrivilege`, etc.                 |                                                                            |\n| `whoami /groups`                                                         | ✓                                                                                                                                               | ✓          | Normal User | User's group memberships                 | Membership in groups like Administrators, Backup Operators, or Remote Desktop Users.             |                                                                            |\n| `net localgroup`                                                         | ✓                                                                                                                                               | ✓          | Normal User | List of local groups and members         | Identify misconfigured group memberships for potential exploitation.                             |                                                                            |\n| `query user`                                                             | ✓                                                                                                                                               | ✓          | Normal User | Logged on users                          | Identify sessions for hijacking or lateral movement.                                             |                                                                            |\n| `set`                                                                    | ✓                                                                                                                                               |            | Normal User | Environment variables                    | Sensitive info like paths, passwords, or tokens. Use exposed paths to find writable directories. |                                                                            |\n| `Get-ChildItem Env:`                                                     |                                                                                                                                                 | ✓          | Normal User | Environment variables                    | Same as above.                                                                                   |                                                                            |\n| `whoami /user`                                                           | ✓                                                                                                                                               | ✓          | Normal User | User's Security Identifier (SID)         | Use SID to look up user privileges in security policies.                                         |                                                                            |\n| `wevtutil qe Security /q:\"*[System/EventID=4624]\" /f:text /rd:true /c:1` | ✓                                                                                                                                               | ✓          | Admin       | Recent logon events                      | Identify successful logons and correlate with exploitable sessions.                              |                                                                            |\n| `net user`                                                               | ✓                                                                                                                                               | ✓          | Normal User | List of all user accounts                | Identify weak or default accounts. Attempt password spraying or brute force.                     |                                                                            |\n| `whoami /all`                                                            | ✓                                                                                                                                               | ✓          | Normal User | Detailed token privileges                | Similar to `whoami /priv`. Look for exploitable privileges.                                      |                                                                            |\n| `net localgroup administrators`                                          | ✓                                                                                                                                               | ✓          | Admin       | Members of the Administrators group      | Confirm if your account is listed or find ways to add it.                                        |                                                                            |\n| `wmic useraccount where name='%username%' get /all`                      | ✓                                                                                                                                               | ✓          | Admin       | Comprehensive user account details       | Use information for further targeting and exploitation.                                          |                                                                            |\n| `auditpol /get /category:*`                                              | ✓                                                                                                                                               | ✓          | Admin       | Current audit policies                   | Identify if auditing is lax or improperly configured, allowing stealthy exploitation.            |                                                                            |\n| `Get-WmiObject -Class Win32_ComputerSystem`                              |                                                                                                                                                 | ✓          | Normal User | Info about the logged-in user and system | Correlate with other findings for targeted attacks.                                              |                                                                            |\n| `Get-Process                                                             | Select-Object -Property Id,ProcessName,@{Name=\"Owner\";Expression={(Get-WmiObject Win32_Process -Filter \"ProcessId=$($_.Id)\").GetOwner().User}}` |            | ✓           | Admin                                    | Ownership of running processes                                                                   | Identify processes owned by privileged users to hijack or manipulate them. |\n\n### Summary\n\nThis table provides a comprehensive overview of useful enumeration commands, environments where they can be run (CMD or PowerShell), the required user privileges, and what to look for in the output. The final column links each command's output to potential privilege escalation opportunities, helping to identify misconfigurations, excessive privileges, and other security gaps that can be exploited. If you need any further details or additional scenarios, feel free to ask!","x":-7407,"y":849,"width":3077,"height":1161},
		{"id":"2de2ee2abb20ef8c","type":"text","text":"``` Powershell\n## Retrieves replication partner metadata for a specific domain controller.\nGet-ADReplicationPartnerMetadata -Target \"<DomainController>\"\n\n## Retrieves replication failures for a specific domain.\nGet-ADReplicationFailure -Scope \"<Domain>\"\n\n## Retrieves replication up-to-dateness vector table for a specific domain controller.\nGet-ADReplicationUpToDatenessVectorTable -Server \"<DomainController>\"\n\n## Retrieves fine-grained password policies in the domain.\nGet-ADFineGrainedPasswordPolicy\n```","x":-6240,"y":360,"width":834,"height":333},
		{"id":"10a8688b038b625c","type":"text","text":"DSQUETY \n```\n6. **dsquery subnet -limit 0**: Lists all subnets in the domain.\n7. **dsquery site -limit 0**: Lists all sites in the domain.\n8. **dsquery contact -limit 0**: Lists all contacts in the domain.\n9. 1. **dsquery server -domain <domain>**: Lists servers in a domain.\n```","x":-5220,"y":350,"width":786,"height":309},
		{"id":"29e3222117a8cea0","type":"text","text":"## Network Enumeration","x":-4120,"y":390,"width":480,"height":69},
		{"id":"b6ca74efaa020150","type":"text","text":"## Plain Text Enumeration","x":-4120,"y":485,"width":480,"height":72},
		{"id":"34a71702744eb038","type":"text","text":"Got it! Here's a revised list that specifies whether each command should be run in Command Prompt (cmd) or PowerShell, and whether it requires administrative privileges or can be run as a normal user.\n\n### Windows Commands\n\n1. **Whoami**\n   - **Command**: `whoami`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n2. **Echo %username%**\n   - **Command**: `echo %username%`\n   - **Environment**: CMD\n   - **Privileges**: Normal User\n\n3. **Userinfo**\n   - **Command**: `net user %username%`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n4. **Privileges**\n   - **Command**: `whoami /priv`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n5. **Groups**\n   - **Command**: `whoami /groups`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n6. **Local Group Membership**\n   - **Command**: `net localgroup`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n7. **Logged on Users**\n   - **Command**: `query user`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n8. **Environment Variables**\n   - **Command**: `set`\n   - **Environment**: CMD\n   - **Privileges**: Normal User\n\n   - **Command**: `Get-ChildItem Env:`\n   - **Environment**: PowerShell\n   - **Privileges**: Normal User\n\n9. **User SID**\n   - **Command**: `whoami /user`\n   - **Environment**: CMD / PowerShell\n   - **Privileges**: Normal User\n\n10. **Logon Events**\n    - **Command**: `wevtutil qe Security /q:\"*[System/EventID=4624]\" /f:text /rd:true /c:1`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Admin\n\n11. **List All Users**\n    - **Command**: `net user`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Normal User\n\n12. **Check Current User Token Privileges**\n    - **Command**: `whoami /all`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Normal User\n\n### Additional Commands for Admin Users\n\n13. **List Local Administrators Group Members**\n    - **Command**: `net localgroup administrators`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Admin\n\n14. **Detailed User Account Information**\n    - **Command**: `wmic useraccount where name='%username%' get /all`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Admin\n\n15. **Audit Policies**\n    - **Command**: `auditpol /get /category:*`\n    - **Environment**: CMD / PowerShell\n    - **Privileges**: Admin\n\n### PowerShell Specific Commands\n\n16. **Get Current User Information**\n    - **Command**: `Get-WmiObject -Class Win32_ComputerSystem`\n    - **Environment**: PowerShell\n    - **Privileges**: Normal User\n\n17. **Get Process Owner**\n    - **Command**: `Get-Process | Select-Object -Property Id,ProcessName,@{Name=\"Owner\";Expression={(Get-WmiObject Win32_Process -Filter \"ProcessId=$($_.Id)\").GetOwner().User}}`\n    - **Environment**: PowerShell\n    - **Privileges**: Admin\n\n### Summary Table\n\n| Command                                   | CMD | PowerShell | Normal User | Admin |\n| ----------------------------------------- | --- | ---------- | ----------- | ----- |\n| whoami                                    | ✓   | ✓          | ✓           |       |\n| echo %username%                           | ✓   |            | ✓           |       |\n| net user %username%                       | ✓   | ✓          | ✓           |       |\n| whoami /priv                              | ✓   | ✓          | ✓           |       |\n| whoami /groups                            | ✓   | ✓          | ✓           |       |\n| net localgroup                            | ✓   | ✓          | ✓           |       |\n| query user                                | ✓   | ✓          | ✓           |       |\n| set                                       | ✓   |            | ✓           |       |\n| Get-ChildItem Env:                        |     | ✓          | ✓           |       |\n| whoami /user                              | ✓   | ✓          | ✓           |       |\n| wevtutil qe Security                      | ✓   | ✓          |             | ✓     |\n| net user                                  | ✓   | ✓          | ✓           |       |\n| whoami /all                               | ✓   | ✓          | ✓           |       |\n| net localgroup administrators             | ✓   | ✓          |             | ✓     |\n| wmic useraccount                          | ✓   | ✓          |             | ✓     |\n| auditpol /get /category:*                 | ✓   | ✓          |             | ✓     |\n| Get-WmiObject -Class Win32_ComputerSystem |     | ✓          | ✓           |       |\n| Get-Process (with owner info)             |     | ✓          |             | ✓     |\n\nThis comprehensive list should cover your needs for enumerating current user information on Windows machines, distinguishing between CMD and PowerShell, and noting the required privileges. If you need any further modifications or additional commands, let me know!","x":-5467,"y":2144,"width":1137,"height":692},
		{"id":"b0e7bb614b38b769","type":"text","text":"Understood. Here’s a more detailed approach that ties enumeration commands to potential privilege escalation opportunities, including what to look for in the output and how to leverage it.\n\n### Windows Commands for Enumeration and Privilege Escalation\n\n#### Whoami\n- **Command**: `whoami`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: The current username. Identify if the user is an admin or belongs to privileged groups.\n- **Potential Exploit**: If the user is an admin, directly attempt administrative tasks. If not, look for misconfigurations.\n\n#### Echo %username%\n- **Command**: `echo %username%`\n- **Environment**: CMD\n- **Privileges**: Normal User\n- **What to Look For**: The current username. Similar to `whoami`.\n\n#### Userinfo\n- **Command**: `net user %username%`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Detailed user information, account settings, and group memberships.\n- **Potential Exploit**: Look for \"Password never expires\" or \"User may change password\". If password policies are weak, attempt password guessing.\n\n#### Privileges\n- **Command**: `whoami /priv`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: List of privileges assigned to the current user.\n- **Potential Exploit**: Look for privileges like `SeDebugPrivilege`, `SeImpersonatePrivilege`, `SeBackupPrivilege`, etc. These can often be leveraged for privilege escalation (e.g., using tools like Juicy Potato).\n\n#### Groups\n- **Command**: `whoami /groups`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Groups the user is a member of.\n- **Potential Exploit**: Membership in privileged groups such as Administrators, Backup Operators, or Remote Desktop Users can provide vectors for escalation.\n\n#### Local Group Membership\n- **Command**: `net localgroup`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: List of all local groups and their members.\n- **Potential Exploit**: Identify any misconfigured group memberships that can be exploited (e.g., if a non-admin user is part of the Administrators group).\n\n#### Logged on Users\n- **Command**: `query user`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Users currently logged on.\n- **Potential Exploit**: Identify sessions that might be hijacked or used for lateral movement.\n\n#### Environment Variables\n- **Command (CMD)**: `set`\n- **Command (PowerShell)**: `Get-ChildItem Env:`\n- **Privileges**: Normal User\n- **What to Look For**: Sensitive information stored in environment variables, such as paths, passwords, or tokens.\n- **Potential Exploit**: Use exposed paths to find writable directories or binaries. Use credentials/tokens for further exploitation.\n\n#### User SID\n- **Command**: `whoami /user`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: User's Security Identifier (SID).\n- **Potential Exploit**: Use SID to look up user privileges in security policies.\n\n#### Logon Events\n- **Command**: `wevtutil qe Security /q:\"*[System/EventID=4624]\" /f:text /rd:true /c:1`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Recent logon events.\n- **Potential Exploit**: Identify successful logons and correlate with potentially exploitable sessions.\n\n#### List All Users\n- **Command**: `net user`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: List of all user accounts.\n- **Potential Exploit**: Identify weak or default accounts. Attempt password spraying or brute force.\n\n#### Check Current User Token Privileges\n- **Command**: `whoami /all`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Detailed token privileges.\n- **Potential Exploit**: Similar to `whoami /priv`. Look for exploitable privileges.\n\n### Additional Commands for Admin Users\n\n#### List Local Administrators Group Members\n- **Command**: `net localgroup administrators`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Members of the Administrators group.\n- **Potential Exploit**: Confirm if your account is listed or find ways to add it.\n\n#### Detailed User Account Information\n- **Command**: `wmic useraccount where name='%username%' get /all`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Comprehensive user account details.\n- **Potential Exploit**: Use information for further targeting and exploitation.\n\n#### Audit Policies\n- **Command**: `auditpol /get /category:*`\n- **Environment**: CMD / PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Current audit policies.\n- **Potential Exploit**: Identify if auditing is lax or improperly configured, which might allow stealthy exploitation.\n\n### PowerShell Specific Commands\n\n#### Get Current User Information\n- **Command**: `Get-WmiObject -Class Win32_ComputerSystem`\n- **Environment**: PowerShell\n- **Privileges**: Normal User\n- **What to Look For**: Information about the logged-in user and system.\n- **Potential Exploit**: Correlate with other findings for targeted attacks.\n\n#### Get Process Owner\n- **Command**: `Get-Process | Select-Object -Property Id,ProcessName,@{Name=\"Owner\";Expression={(Get-WmiObject Win32_Process -Filter \"ProcessId=$($_.Id)\").GetOwner().User}}`\n- **Environment**: PowerShell\n- **Privileges**: Admin\n- **What to Look For**: Ownership of running processes.\n- **Potential Exploit**: Identify processes owned by privileged users to hijack or manipulate them.\n\n### Summary\n\nThis structured approach helps to identify potential privilege escalation vectors based on the output of enumeration commands. The key is to analyze the results for misconfigurations, excessive privileges, and other security gaps that can be exploited to escalate privileges, whether locally, horizontally, or vertically. If you need further details or additional scenarios, feel free to ask!","x":-7368,"y":2144,"width":1545,"height":3190},
		{"id":"2b8fc2d7559c5e4b","type":"text","text":"### Readme in PowerSploit/enum\n\n```\n### Misc Functions:\n    Export-PowerViewCSV             -   thread-safe CSV append\n    Resolve-IPAddress               -   resolves a hostname to an IP\n    ConvertTo-SID                   -   converts a given user/group name to a security identifier (SID)\n    Convert-ADName                  -   converts object names between a variety of formats\n    ConvertFrom-UACValue            -   converts a UAC int value to human readable form\n    Add-RemoteConnection            -   pseudo \"mounts\" a connection to a remote path using the specified credential object\n    Remove-RemoteConnection         -   destroys a connection created by New-RemoteConnection\n    Invoke-UserImpersonation        -   creates a new \"runas /netonly\" type logon and impersonates the token\n    Invoke-RevertToSelf             -   reverts any token impersonation\n    Get-DomainSPNTicket             -   request the kerberos ticket for a specified service principal name (SPN)\n    Invoke-Kerberoast               -   requests service tickets for kerberoast-able accounts and returns extracted ticket hashes\n    Get-PathAcl                     -   get the ACLs for a local/remote file path with optional group recursion\n\n\n### Domain/LDAP Functions:\n    Get-DomainDNSZone               -   enumerates the Active Directory DNS zones for a given domain\n    Get-DomainDNSRecord             -   enumerates the Active Directory DNS records for a given zone\n    Get-Domain                      -   returns the domain object for the current (or specified) domain\n    Get-DomainController            -   return the domain controllers for the current (or specified) domain\n    Get-Forest                      -   returns the forest object for the current (or specified) forest\n    Get-ForestDomain                -   return all domains for the current (or specified) forest\n    Get-ForestGlobalCatalog         -   return all global catalogs for the current (or specified) forest\n    Find-DomainObjectPropertyOutlier-   inds user/group/computer objects in AD that have 'outlier' properties set\n    Get-DomainUser                  -   return all users or specific user objects in AD\n    New-DomainUser                  -   creates a new domain user (assuming appropriate permissions) and returns the user object\n    Set-DomainUserPassword          -   sets the password for a given user identity and returns the user object\n    Get-DomainUserEvent             -   enumerates account logon events (ID 4624) and Logon with explicit credential events\n    Get-DomainComputer              -   returns all computers or specific computer objects in AD\n    Get-DomainObject                -   returns all (or specified) domain objects in AD\n    Set-DomainObject                -   modifies a gven property for a specified active directory object\n    Get-DomainObjectAcl             -   returns the ACLs associated with a specific active directory object\n    Add-DomainObjectAcl             -   adds an ACL for a specific active directory object\n    Find-InterestingDomainAcl       -   finds object ACLs in the current (or specified) domain with modification rights set to non-built in objects\n    Get-DomainOU                    -   search for all organization units (OUs) or specific OU objects in AD\n    Get-DomainSite                  -   search for all sites or specific site objects in AD\n    Get-DomainSubnet                -   search for all subnets or specific subnets objects in AD\n    Get-DomainSID                   -   returns the SID for the current domain or the specified domain\n    Get-DomainGroup                 -   return all groups or specific group objects in AD\n    New-DomainGroup                 -   creates a new domain group (assuming appropriate permissions) and returns the group object\n    Get-DomainManagedSecurityGroup  -   returns all security groups in the current (or target) domain that have a manager set\n    Get-DomainGroupMember           -   return the members of a specific domain group\n    Add-DomainGroupMember           -   adds a domain user (or group) to an existing domain group, assuming appropriate permissions to do so\n    Get-DomainFileServer            -   returns a list of servers likely functioning as file servers\n    Get-DomainDFSShare              -   returns a list of all fault-tolerant distributed file systems for the current (or specified) domain\n\n   \n### GPO functions\n\n    Get-DomainGPO                           -   returns all GPOs or specific GPO objects in AD\n    Get-DomainGPOLocalGroup                 -   returns all GPOs in a domain that modify local group memberships through 'Restricted Groups' or Group Policy preferences\n    Get-DomainGPOUserLocalGroupMapping      -   enumerates the machines where a specific domain user/group is a member of a specific local group, all through GPO correlation\n    Get-DomainGPOComputerLocalGroupMapping  -   takes a computer (or GPO) object and determines what users/groups are in the specified local group for the machine through GPO correlation\n    Get-DomainPolicy                        -   returns the default domain policy or the domain controller policy for the current domain or a specified domain/domain controller\n\n\n### Computer Enumeration Functions\n\n    Get-NetLocalGroup                   -   enumerates the local groups on the local (or remote) machine\n    Get-NetLocalGroupMember             -   enumerates members of a specific local group on the local (or remote) machine\n    Get-NetShare                        -   returns open shares on the local (or a remote) machine\n    Get-NetLoggedon                     -   returns users logged on the local (or a remote) machine\n    Get-NetSession                      -   returns session information for the local (or a remote) machine\n    Get-RegLoggedOn                     -   returns who is logged onto the local (or a remote) machine through enumeration of remote registry keys\n    Get-NetRDPSession                   -   returns remote desktop/session information for the local (or a remote) machine\n    Test-AdminAccess                    -   rests if the current user has administrative access to the local (or a remote) machine\n    Get-NetComputerSiteName             -   returns the AD site where the local (or a remote) machine resides\n    Get-WMIRegProxy                     -   enumerates the proxy server and WPAD conents for the current user\n    Get-WMIRegLastLoggedOn              -   returns the last user who logged onto the local (or a remote) machine\n    Get-WMIRegCachedRDPConnection       -   returns information about RDP connections outgoing from the local (or remote) machine\n    Get-WMIRegMountedDrive              -   returns information about saved network mounted drives for the local (or remote) machine\n    Get-WMIProcess                      -   returns a list of processes and their owners on the local or remote machine\n    Find-InterestingFile                -   searches for files on the given path that match a series of specified criteria\n\n\n### Threaded 'Meta'-Functions\n\n    Find-DomainUserLocation             -   finds domain machines where specific users are logged into\n    Find-DomainProcess                  -   finds domain machines where specific processes are currently running\n    Find-DomainUserEvent                -   finds logon events on the current (or remote domain) for the specified users\n    Find-DomainShare                    -   finds reachable shares on domain machines\n    Find-InterestingDomainShareFile     -   searches for files matching specific criteria on readable shares in the domain\n    Find-LocalAdminAccess               -   finds machines on the local domain where the current user has local administrator access\n    Find-DomainLocalGroupMember         -   enumerates the members of specified local group on machines in the domain\n\n\n### Domain Trust Functions:\n    Get-DomainTrust                     -   returns all domain trusts for the current domain or a specified domain\n    Get-ForestTrust                     -   returns all forest trusts for the current forest or a specified forest\n    Get-DomainForeignUser               -   enumerates users who are in groups outside of the user's domain\n    Get-DomainForeignGroupMember        -   enumerates groups with users outside of the group's domain and returns each foreign member\n    Get-DomainTrustMapping              -   this function enumerates all trusts for the current domain and then enumerates all trusts for each domain it finds\n```","x":-5467,"y":2891,"width":1278,"height":2539},
		{"id":"374c876881c8bb7c","type":"text","text":"## Ldap Enumeration","x":2040,"y":-1300,"width":289,"height":74},
		{"id":"703c7defdf6773d9","type":"text","text":"``` Powershell\n## Searching with LDAP searh filters\nGet-ADObject -LDAPFilter \"(attribute=value)\" \ndsquery * -filter \"(attribute=value)\"\n```\nCheck list of Attributes.\n##### Basic LDAP Search Filters\n- **Equality Filter**: `(attribute=valu)`\n- **Presence Filter**: `(attribute=*)`\n- **Negation Filter**: `(!(attribute=value))`\n- **AND Filter**: `(&(filter1)(filter2)...)`\n- **OR Filter**: `(|(filter1)(filter2)...)`\n##### Complex Filters\n\n1. **AND with OR Filter**: `(&(filter1)(|(filter2)(filter3)...))`\n2. **OR with AND Filter**: `(|(filter1)(&(filter2)(filter3)...))`","x":2420,"y":-1540,"width":857,"height":554},
		{"id":"2c9957cc781b9ceb","type":"text","text":"## Sample\n``` powershell\n((userAccountControl:1.2.840.113556.1.4.803:=32))\n```\n#### OID match strings\n\nOIDs are rules used to match bit values with attributes, as seen above. For LDAP and AD, there are three main matching rules: `1.2.840.113556.1.4.803`\nhttps://ldap.com/ldap-oid-reference-guide/\n\n#### UAC Values\nRepresents the decimal bitmask we want to match in search.\nCheck UAS Value list.\n","x":3976,"y":-1341,"width":1465,"height":394},
		{"id":"57a21e56f2b5da47","type":"text","text":"## UserAccountControl Searching","x":3457,"y":-1184,"width":416,"height":81},
		{"id":"51f02f35b94e42e2","type":"text","text":"| Property flag                  | Value in hexadecimal | Value in decimal |\n| ------------------------------ | -------------------- | ---------------- |\n| SCRIPT                         | 0x0001               | 1                |\n| ACCOUNTDISABLE                 | 0x0002               | 2                |\n| HOMEDIR_REQUIRED               | 0x0008               | 8                |\n| LOCKOUT                        | 0x0010               | 16               |\n| PASSWD_NOTREQD                 | 0x0020               | 32               |\n| PASSWD_CANT_CHANGE             | 0x0040               | 64               |\n| ENCRYPTED_TEXT_PWD_ALLOWED     | 0x0080               | 128              |\n| TEMP_DUPLICATE_ACCOUNT         | 0x0100               | 256              |\n| NORMAL_ACCOUNT                 | 0x0200               | 512              |\n| INTERDOMAIN_TRUST_ACCOUNT      | 0x0800               | 2048             |\n| WORKSTATION_TRUST_ACCOUNT      | 0x1000               | 4096             |\n| SERVER_TRUST_ACCOUNT           | 0x2000               | 8192             |\n| DONT_EXPIRE_PASSWORD           | 0x10000              | 65536            |\n| MNS_LOGON_ACCOUNT              | 0x20000              | 131072           |\n| SMARTCARD_REQUIRED             | 0x40000              | 262144           |\n| TRUSTED_FOR_DELEGATION         | 0x80000              | 524288           |\n| NOT_DELEGATED                  | 0x100000             | 1048576          |\n| USE_DES_KEY_ONLY               | 0x200000             | 2097152          |\n| DONT_REQ_PREAUTH               | 0x400000             | 4194304          |\n| PASSWORD_EXPIRED               | 0x800000             | 8388608          |\n| TRUSTED_TO_AUTH_FOR_DELEGATION | 0x1000000            | 16777216         |\n| PARTIAL_SECRETS_ACCOUNT        | 0x04000000           | 67108864         |","x":-2280,"y":1350,"width":680,"height":754},
		{"id":"f4fccffd7cae9f32","type":"text","text":"1. **Organizational Attributes**:\n    \n    - `o`: Organization name\n    - `ou`: Organizational unit name\n    - `dc`: Domain component\n    - `l`: Locality (e.g., city)\n    - `st`: State or province name\n    - `c`: Country name\n    - `postalCode`: Postal code\n2. **Personal Attributes**:\n    \n    - `cn`: Common name\n    - `sn`: Surname (last name)\n    - `givenName`: First name\n    - `initials`: Initials of the person\n    - `displayName`: Display name\n    - `description`: Description of the entry\n    - `uid`: User ID\n    - `userPassword`: User's password\n    - `mail`: Email address\n    - `telephoneNumber`: Telephone number\n    - `homePhone`: Home phone number\n    - `mobile`: Mobile phone number\n    - `facsimileTelephoneNumber`: Fax number\n    - `pager`: Pager number\n    - `homePostalAddress`: Home postal address\n    - `postalAddress`: Postal address\n3. **Organizational Role Attributes**:\n    \n    - `title`: Job title\n    - `ou`: Organizational unit\n    - `employeeNumber`: Employee number\n    - `employeeType`: Type of employee (e.g., contractor, full-time)\n4. **Security and Access Control Attributes**:\n    \n    - `objectClass`: Class of the object (e.g., person, organizationalPerson, inetOrgPerson)\n    - `userCertificate`: User certificate\n    - `userSMIMECertificate`: S/MIME certificate\n    - `userPKCS12`: PKCS #12 user certificate\n5. **Group Attributes**:\n    \n    - `member`: List of members\n    - `uniqueMember`: Unique members (used in group entries)\n6. **Location Attributes**:\n    \n    - `physicalDeliveryOfficeName`: Office location\n    - `roomNumber`: Room number\n7. **Miscellaneous Attributes**:\n    \n    - `preferredLanguage`: Preferred language\n    - `manager`: Manager's DN (Distinguished Name)\n    - `seeAlso`: DN of related entries\n\n### Active Directory Specific Attributes\n\n1. **Account and Login Attributes**:\n    \n    - `sAMAccountName`: Security Account Manager (SAM) account name\n    - `userPrincipalName`: User Principal Name (UPN)\n    - `msDS-UserAccountControlComputed`: Computed user account control\n    - `accountExpires`: Account expiration date\n2. **Group and Membership Attributes**:\n    \n    - `memberOf`: Groups the user is a member of\n    - `primaryGroupID`: Primary group ID\n3. **Profile and Settings Attributes**:\n    \n    - `profilePath`: Path to the user's profile\n    - `homeDirectory`: Path to the user's home directory\n    - `scriptPath`: Path to the user's logon script\n4. **Logon Information Attributes**:\n    \n    - `lastLogon`: Last logon timestamp\n    - `lastLogoff`: Last logoff timestamp\n    - `pwdLastSet`: Timestamp when the password was last set\n5. **Exchange Attributes (for use with Microsoft Exchange)**:\n    \n    - `msExchHomeServerName`: Exchange home server name\n    - `msExchMailboxGUID`: Mailbox GUID\n\n#### Core Schema Attributes\n1. **Posix Account Attributes** (used in UNIX/Linux systems):\n    \n    - `uidNumber`: User ID number\n    - `gidNumber`: Group ID number\n    - `homeDirectory`: Home directory path\n    - `loginShell`: Login shell\n    - `gecos`: GECOS field (used for general information about the user)\n2. **LDAP Authentication Attributes**:\n    \n    - `authPassword`: Authentication password\n    - `shadowLastChange`: Last password change date\n    - `shadowMin`: Minimum number of days between password changes\n    - `shadowMax`: Maximum number of days before a password change is required\n    - `shadowWarning`: Number of days before password expiration warning\n    - `shadowInactive`: Number of days after password expiration until the account is disabled\n\n#### Extended Active Directory (AD) Attributes\n\n1. **Account Control Attributes**:\n    \n    - `userAccountControl`: Account control settings (e.g., disabled, password not required)\n    - `lockoutTime`: Account lockout timestamp\n    - `badPwdCount`: Number of bad password attempts\n2. **Additional Profile and Group Attributes**:\n    \n    - `logonCount`: Number of successful logons\n    - `memberOf`: Groups that the user is a direct member of\n    - `primaryGroupToken`: Primary group token\n3. **Exchange Server Attributes**:\n    \n    - `msExchMailNickname`: Mail nickname\n    - `msExchUserCulture`: User culture settings for Exchange\n    - `homeMDB`: Home mailbox database\n\n#### Organization-Specific and Miscellaneous Attributes\n\n1. **Service and Application Attributes**:\n    \n    - `servicePrincipalName`: Service principal names (for Kerberos authentication)\n    - `userWorkstations`: User workstations (allowed logon workstations)\n2. **Extended Contact Information**:\n    \n    - `pager`: Pager number\n    - `company`: Company name\n    - `department`: Department name\n    - `streetAddress`: Street address\n    - `postOfficeBox`: Post office box\n    - `internationalISDNNumber`: International ISDN number\n3. **Custom and Extended Schema Attributes**:\n    \n    - `jpegPhoto`: JPEG photograph of the person\n    - `carLicense`: Car license\n    - `audio`: Audio file\n    - `businessCategory`: Business category\n    - `preferredDeliveryMethod`: Preferred delivery method\n4. **Application-Specific Attributes**:\n    \n    - `radiusProfileDn`: Radius profile distinguished name (used in network access authentication)\n    - `radiusCallbackNumber`: Radius callback number\n5. **Security and Certification Attributes**:\n    \n    - `userCertificate`: User X.509 certificate\n    - `authorityRevocationList`: Authority revocation list\n    - `certificateRevocationList`: Certificate revocation list\n    - `supportedAlgorithms`: Supported algorithms for security operations","x":-1400,"y":1289,"width":840,"height":3434},
		{"id":"80d543da47127673","type":"text","text":"## System Enumeration\n","x":224,"y":3149,"width":336,"height":80},
		{"id":"f0ee24b1276def9e","x":1475,"y":3149,"width":317,"height":69,"type":"text","text":"## Initial informations"},
		{"id":"d590cb6ac5ed98f5","type":"text","text":"## Group Policy ","x":1200,"y":2920,"width":336,"height":86},
		{"id":"32a7a61fd959c561","type":"text","text":"``` Powershell\n# Displays the resultant set of policies for the current user\ngpresult /r\n# Generates an HTML report of the resultant set of policies for the system and user\ngpresult /h gpreport.html\n```","x":300,"y":2720,"width":800,"height":166},
		{"id":"4d15de64f1165254","type":"text","text":"## HotFixes","x":1200,"y":2738,"width":336,"height":65},
		{"id":"a4fb9ae693757365","type":"text","text":"``` powershell\n## Prints the patch level and description of the Hotfixes applied\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n```","x":300,"y":2540,"width":720,"height":130},
		{"id":"85f1b08da9f60486","type":"text","text":"## Firewall","x":1200,"y":2545,"width":336,"height":60},
		{"id":"09ac2679e50f6d23","type":"text","text":"``` powershell\n# Displays the current configuration of the Windows Firewall, including settings for all profiles (domain, private, and public)\nnetsh advfirewall show allprofiles\n\n# Retrieves the list of firewall rules configured on the system\nGet-NetFirewallRule\n```","x":300,"y":2260,"width":720,"height":200},
		{"id":"2b689f4d5e70d54e","type":"text","text":"## System Drivers","x":1792,"y":2571,"width":336,"height":69},
		{"id":"52e4812348bdb22c","type":"text","text":"``` powershell\n# Lists all drivers installed on the system\ndriverquery\n\n# Provides detailed information about each driver\ndriverquery /v\n\n# Retrieves details about system drivers using WMI\nGet-WmiObject -Class Win32_SystemDriver | Format-List *\n```","x":2236,"y":2480,"width":720,"height":252},
		{"id":"e0129930dad8eeba","type":"text","text":"### $ServicePath ?","x":1580,"y":1740,"width":250,"height":60},
		{"id":"122733e5cf29c97d","type":"text","text":"```powershell\n$suspiciousKeywords = \"vuln\", \"suspicious\", \"malware\"\n$services = Get-Service | Where-Object {\n    $_.Name -match ($suspiciousKeywords -join \"|\")\n}\n\nforeach ($service in $services) {\n    Write-Output \"Service Name: $($service.Name)\"\n    Write-Output \"Service Display Name: $($service.DisplayName)\"\n    Write-Output \"Service Status: $($service.Status)\"\n    \n    $serviceDetails = Get-WmiObject -Class Win32_Service -Filter \"Name='$($service.Name)'\" | Format-List *\n    Write-Output $serviceDetails\n    \n    $servicePath = $serviceDetails.PathName\n    Write-Output \"Service Path: $servicePath\"\n    \n    $acl = Get-Acl $servicePath | Format-List\n    Write-Output $acl\n}\n\n```","x":1580,"y":1899,"width":1096,"height":521},
		{"id":"3f3bc9f3ddbddb3d","type":"text","text":"``` powershell\n# Lists all available event logs on the system.\nwevtutil el\nGet-EventLog -List\n\n# Queries specific event logs to retrieve the latest entries\nwevtutil qe System /c:5 /f:text\n\n# Lists all event logs using the newer event logging system\nGet-WinEvent -ListLog *\n\n# Retrieves a specified number of recent entries from a specific event log\nGet-EventLog -LogName System -Newest 10\nGet-WinEvent -LogName System -MaxEvents 10\n\n```","x":2236,"y":2784,"width":720,"height":373},
		{"id":"8b1a617012d650e7","type":"text","text":"``` powershell\n# Lists all installed software products\nwmic product get Name, Version, InstallDate\nGet-WmiObject -Class Win32_Product\n\n# Lists all packages installed on the system\nGet-Package\n```","x":2236,"y":3189,"width":720,"height":191},
		{"id":"ae863a09f9efa0b4","type":"text","text":"## Event Logs","x":1792,"y":2748,"width":336,"height":72},
		{"id":"176c9b654332b164","type":"text","text":"## Installed Software","x":1792,"y":2931,"width":336,"height":65},
		{"id":"3b898aa7f6fe1202","type":"text","text":"``` powershell\n## Provides detailed system information, including system boot time\nsysteminfo | find \"System Boot Time\"\n\n## Retrieves the last boot-up time of the operating system\n(Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime\n```","x":2240,"y":3415,"width":680,"height":180},
		{"id":"27058d0c157af620","type":"text","text":"## System Uptime","x":1792,"y":3320,"width":336,"height":60},
		{"id":"0fd625fb25bd7682","type":"text","text":"``` powershell\n# Retrieves details about the CPU \nwmic cpu get Name, NumberOfCores, NumberOfLogicalProcessors, MaxClockSpeed\nGet-CimInstance -ClassName Win32_Processor\n\n# Provides information about the memory modules installed\nwmic memorychip get BankLabel, Capacity, Speed, Manufacturer, PartNumber\nGet-CimInstance -ClassName Win32_PhysicalMemory\n\n# Lists details of disk drives \nwmic diskdrive get Model, Size, MediaType, SerialNumber\nGet-CimInstance -ClassName Win32_DiskDrive\n```\n","x":300,"y":3270,"width":750,"height":325},
		{"id":"a53192eaeafaaa4c","x":300,"y":3640,"width":750,"height":160,"type":"text","text":"``` powershell\n## checked if Defender was running\nsc query windefend\n## check the status and configuration settings with the Get-MpComputerStatus\nGet-MpComputerStatus\n```"},
		{"id":"3ba9ae3e76777285","x":1792,"y":3590,"width":336,"height":60,"type":"text","text":"## Am I Alone?"},
		{"id":"608fdb9ce399c55d","type":"text","text":"## Hardware Enumeration","x":1160,"y":3367,"width":357,"height":66},
		{"id":"a76559cfff78391f","x":1160,"y":3560,"width":357,"height":60,"type":"text","text":"## Defender Enumeration"},
		{"id":"4bbf093ef181fa49","x":2240,"y":3640,"width":680,"height":100,"type":"text","text":"``` powershell\n## check and see if you are the only one logged in\nqwinsta\n```"},
		{"id":"5e3a6e70dc9bc222","type":"text","text":"``` Powershell \n#List sessions\nqwinsta\nklist sessions\n```","x":2805,"y":3784,"width":303,"height":114},
		{"id":"c92c43aa886618cd","type":"text","text":"``` powershell\n## Add local user and put them local Administrators group\nnet user username password /ADD\nnet localgroup Administrators username /ADD\n\n# Add user to insteresting groups\nnet localgroup \"< Remote Desktop Users | Power users | Debugger users >\" UserLoginName  /add\n```","x":3645,"y":3640,"width":860,"height":200},
		{"id":"2af816f32de2763b","type":"text","text":"## Domain Enumeration","x":-8220,"y":234,"width":289,"height":100},
		{"id":"6dccd093c14f4c8c","type":"text","text":"## PowerView","x":-8640,"y":252,"width":340,"height":64},
		{"id":"27d3f31dc58e04ae","type":"text","text":"\n``` Powershell\nGet-Domain                    ## Return AD object for the current (or specified) domain.\n\nGet-DomainController          ## Return a list of the target domain controllers for the specified target domain.\n\nGet-DomainUser                ## Return all users or specific user objects in AD.\n\nGet-DomainComputer            ## Return all computers or specific computer objects in AD.\n\nGet-DomainGroup               ## Return all groups or specific group objects in AD.\n\nGet-DomainOU                  ## Search for all or specific OU objects in AD.\n\nGet-DomainGroupMember         ## Return the members of a specific domain group.\n\nGet-DomainFileServer          ## Return a list of servers likely functioning as file servers.\n\nGet-DomainDFSShare            ## Return a list of all distributed file systems for the current (or specified) domain.\n\nGet-DomainGPO                 ## Return all GPOs or specific GPO objects in AD.\n\nGet-DomainPolicy              ## Return the default domain policy or the domain controller policy for the current domain.\n \nGet-DomainTrust               ## Returns domain trusts for the current domain or a specified domain.\n\nGet-ForestTrust               ## Returns all forest trusts for the current forest or a specified forest.\n\nGet-DomainForeignUser         ## Enumerates users who are in groups outside of the user's domain.\n\nGet-DomainForeignGroupMember  ## Enumerates groups with users outside of the group's domain and returns each foreign member.\n\nGet-DomainTrustMapping        ## Enumerates all trusts for current domain and any others seen.\n\nGet-DomainGroupMember -Identity \"<GroupName>\" -Recurse  ## ist all the members of a target group.\n\nGet-DomainSPNTicket           ## Request the kerberos ticket for a specified service principal name.\n```\n","x":-7560,"y":-126,"width":1160,"height":820}
	],
	"edges":[
		{"id":"d0dc2ab83ca8de65","fromNode":"be46450db2cae69a","fromSide":"right","toNode":"179094e6ba2d2b2c","toSide":"left"},
		{"id":"64037bd9776cb381","fromNode":"179094e6ba2d2b2c","fromSide":"right","toNode":"c5163b6b6363c2cc","toSide":"left"},
		{"id":"78f90cab6eb5565b","fromNode":"179094e6ba2d2b2c","fromSide":"right","toNode":"0293d6c1b4598b68","toSide":"left"},
		{"id":"45a63d56fe5e62ee","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"600906e6cbe095c9","toSide":"left"},
		{"id":"feef6b662059d6df","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"e52f0d2795d28cb6","toSide":"left"},
		{"id":"f066da1ae1b1a9e4","fromNode":"a05de09f9d7dad60","fromSide":"right","toNode":"a0b951863e97e01b","toSide":"left"},
		{"id":"9415289301901b53","fromNode":"a0b951863e97e01b","fromSide":"right","toNode":"dfb727dcc6ed7eae","toSide":"left"},
		{"id":"11b1596ade6b48cf","fromNode":"dfb727dcc6ed7eae","fromSide":"right","toNode":"2c065c4f9b53fb4d","toSide":"left"},
		{"id":"8c2d9c467bb8943c","fromNode":"2c065c4f9b53fb4d","fromSide":"right","toNode":"e05e9a5b1a82d0d1","toSide":"left"},
		{"id":"ac086375b62ddb69","fromNode":"2c065c4f9b53fb4d","fromSide":"right","toNode":"71c0359516cb7711","toSide":"left"},
		{"id":"c1fa3262c8305e48","fromNode":"600906e6cbe095c9","fromSide":"right","toNode":"a05de09f9d7dad60","toSide":"left"},
		{"id":"22a141cd8ad54b9b","fromNode":"5e48ae0e0f1ab924","fromSide":"right","toNode":"7d70237c675cebc5","toSide":"left"},
		{"id":"42b77c46047d6265","fromNode":"47278f5e45b06dbf","fromSide":"right","toNode":"71d7fa52d78485de","toSide":"left"},
		{"id":"22b99275640bb6ef","fromNode":"c5163b6b6363c2cc","fromSide":"right","toNode":"e6154d5f4d65e09d","toSide":"left"},
		{"id":"eef0944c9b8ba064","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"a0b43af4b97d53e5","toSide":"left"},
		{"id":"056cc2c7b2f13dab","fromNode":"a0b43af4b97d53e5","fromSide":"right","toNode":"91e94e49805a18e0","toSide":"left"},
		{"id":"0b118a4cd896421b","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"47278f5e45b06dbf","toSide":"left"},
		{"id":"b9e3d6a09db196d1","fromNode":"e6154d5f4d65e09d","fromSide":"right","toNode":"ce9ccc7c0e51dd61","toSide":"left"},
		{"id":"a02c5f81c07a578b","fromNode":"ce9ccc7c0e51dd61","fromSide":"right","toNode":"95ca6015ba1034aa","toSide":"left"},
		{"id":"230f321fca9dbe80","fromNode":"a0b43af4b97d53e5","fromSide":"right","toNode":"ff732b12b148d58e","toSide":"left"},
		{"id":"b85c92a4fe6c6797","fromNode":"10e38a401095bdbb","fromSide":"right","toNode":"f82fa6fce5beb074","toSide":"left"},
		{"id":"98cdda12da75a09e","fromNode":"f82fa6fce5beb074","fromSide":"right","toNode":"c814b6cece9faa34","toSide":"left"},
		{"id":"e47ac01657f5e523","fromNode":"c814b6cece9faa34","fromSide":"right","toNode":"91239944f8a7edd5","toSide":"left"},
		{"id":"32c2e64c84a32be7","fromNode":"91239944f8a7edd5","fromSide":"right","toNode":"c226757e89689a23","toSide":"left"},
		{"id":"f40d639b6d8369a5","fromNode":"0deb57519b817e85","fromSide":"right","toNode":"122733e5cf29c97d","toSide":"left"},
		{"id":"128634931926b9bc","fromNode":"176c9b654332b164","fromSide":"right","toNode":"8b1a617012d650e7","toSide":"left"},
		{"id":"34476646e881aa04","fromNode":"ae863a09f9efa0b4","fromSide":"right","toNode":"3f3bc9f3ddbddb3d","toSide":"left"},
		{"id":"82071a1b1c495311","fromNode":"2b689f4d5e70d54e","fromSide":"right","toNode":"52e4812348bdb22c","toSide":"left"},
		{"id":"5b311d136d354ac4","fromNode":"27058d0c157af620","fromSide":"right","toNode":"3b898aa7f6fe1202","toSide":"left"},
		{"id":"d9d921b3c39b2d07","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"10e38a401095bdbb","toSide":"left"},
		{"id":"3ea341192c58d69e","fromNode":"10e38a401095bdbb","fromSide":"right","toNode":"0deb57519b817e85","toSide":"left"},
		{"id":"d5cdbbb95c7618f6","fromNode":"c5163b6b6363c2cc","fromSide":"right","toNode":"66bb7c823362e9e8","toSide":"left"},
		{"id":"d88ab4245281b275","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"069f95b3afe3e7f8","toSide":"left"},
		{"id":"da248f8481a6bbf7","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"70cb92a429e23f5a","toSide":"left"},
		{"id":"a54df5e73393c1e4","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"f4ac75b58e011232","toSide":"left"},
		{"id":"82ea11501303ec2a","fromNode":"66bb7c823362e9e8","fromSide":"right","toNode":"35c0d89f91ba38a3","toSide":"left"},
		{"id":"5b21be20a307ab64","fromNode":"e52f0d2795d28cb6","fromSide":"right","toNode":"cec118cde28f7148","toSide":"left"},
		{"id":"2b5a93c9f3b7a379","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"925158903f89e395","toSide":"left"},
		{"id":"bcd24a06cd4f0f03","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"1994f82f8b8512f8","toSide":"left"},
		{"id":"61be227fc19745bb","fromNode":"925158903f89e395","fromSide":"top","toNode":"c92c43aa886618cd","toSide":"left","label":"If you are Administrator"},
		{"id":"64704012f055102d","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"5e3a6e70dc9bc222","toSide":"left"},
		{"id":"b48d4acf9c4ecccf","fromNode":"8d1b4c5e91e99b76","fromSide":"right","toNode":"d5bfda678c4005d0","toSide":"left"},
		{"id":"97ead2a3e8e93f01","fromNode":"3ed48e94757891c5","fromSide":"right","toNode":"d5bfda678c4005d0","toSide":"left"},
		{"id":"4ca736bb2e084004","fromNode":"cec118cde28f7148","fromSide":"right","toNode":"3ed48e94757891c5","toSide":"left"},
		{"id":"0342c7e3ab86848a","fromNode":"6dccd093c14f4c8c","fromSide":"right","toNode":"2af816f32de2763b","toSide":"left"},
		{"id":"8d343297a3b161ad","fromNode":"2af816f32de2763b","fromSide":"right","toNode":"27d3f31dc58e04ae","toSide":"left"},
		{"id":"0d294e35a2ec3dcd","fromNode":"374c876881c8bb7c","fromSide":"right","toNode":"703c7defdf6773d9","toSide":"left"},
		{"id":"697849f21e68f9d8","fromNode":"91e94e49805a18e0","fromSide":"right","toNode":"d01ff3ae477bd6d8","toSide":"left"},
		{"id":"2b7296f76c7f7caf","fromNode":"d01ff3ae477bd6d8","fromSide":"right","toNode":"9ac754a60f9e613f","toSide":"left"},
		{"id":"deadeb007c6dc6b9","fromNode":"9ac754a60f9e613f","fromSide":"right","toNode":"46c1560599835fe5","toSide":"left"},
		{"id":"26dcda0c74e9781f","fromNode":"ff732b12b148d58e","fromSide":"right","toNode":"ea7f2a13f546dc8d","toSide":"left"},
		{"id":"1ca647ec32d065b4","fromNode":"ea7f2a13f546dc8d","fromSide":"right","toNode":"9ac754a60f9e613f","toSide":"left"},
		{"id":"b1fbc5ca72aa23e9","fromNode":"ff732b12b148d58e","fromSide":"right","toNode":"374c876881c8bb7c","toSide":"left"},
		{"id":"3f543f329a737428","fromNode":"91e94e49805a18e0","fromSide":"right","toNode":"374c876881c8bb7c","toSide":"left"},
		{"id":"67e107fbb5d6cfc3","fromNode":"703c7defdf6773d9","fromSide":"right","toNode":"57a21e56f2b5da47","toSide":"left"},
		{"id":"e33215926e79a1cf","fromNode":"57a21e56f2b5da47","fromSide":"right","toNode":"2c9957cc781b9ceb","toSide":"left"},
		{"id":"9c3fd7a09d075ebf","fromNode":"e52f0d2795d28cb6","fromSide":"right","toNode":"498e2d04cf912642","toSide":"left"},
		{"id":"17ccd66fd883dc6f","fromNode":"498e2d04cf912642","fromSide":"right","toNode":"8d1b4c5e91e99b76","toSide":"left"},
		{"id":"35c1fb53f74ad37e","fromNode":"0293d6c1b4598b68","fromSide":"right","toNode":"80d543da47127673","toSide":"left"},
		{"id":"a9826caa786bf555","fromNode":"80d543da47127673","fromSide":"right","toNode":"f0ee24b1276def9e","toSide":"left"},
		{"id":"4b90a7b3f7eab45e","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"d590cb6ac5ed98f5","toSide":"right"},
		{"id":"02906c5d1426f32f","fromNode":"d590cb6ac5ed98f5","fromSide":"left","toNode":"32a7a61fd959c561","toSide":"right"},
		{"id":"41c150a70b548c89","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"4d15de64f1165254","toSide":"right"},
		{"id":"ff0259881161ef7c","fromNode":"4d15de64f1165254","fromSide":"left","toNode":"a4fb9ae693757365","toSide":"right"},
		{"id":"07f86160ea87f7b5","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"85f1b08da9f60486","toSide":"right"},
		{"id":"ff1b9396b8e09406","fromNode":"85f1b08da9f60486","fromSide":"left","toNode":"09ac2679e50f6d23","toSide":"right"},
		{"id":"c24b720095f17896","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"2b689f4d5e70d54e","toSide":"left"},
		{"id":"f099c312619c8559","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"ae863a09f9efa0b4","toSide":"left"},
		{"id":"c6f4a3beb2eda010","fromNode":"f0ee24b1276def9e","fromSide":"top","toNode":"176c9b654332b164","toSide":"left"},
		{"id":"ee7dbf637777a9a3","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"27058d0c157af620","toSide":"left"},
		{"id":"e93e633d49558d88","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"608fdb9ce399c55d","toSide":"right"},
		{"id":"1c8e8a818911b036","fromNode":"608fdb9ce399c55d","fromSide":"left","toNode":"0fd625fb25bd7682","toSide":"right"},
		{"id":"5d73869d68943ec9","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"a76559cfff78391f","toSide":"right"},
		{"id":"a727c83c4005ad27","fromNode":"a76559cfff78391f","fromSide":"left","toNode":"a53192eaeafaaa4c","toSide":"right"},
		{"id":"574c086e6b2bcd53","fromNode":"f0ee24b1276def9e","fromSide":"bottom","toNode":"3ba9ae3e76777285","toSide":"left"},
		{"id":"e7990e035b840fb9","fromNode":"3ba9ae3e76777285","fromSide":"right","toNode":"4bbf093ef181fa49","toSide":"left"}
	]
}